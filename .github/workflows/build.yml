# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.23.8', ]

    steps:
      - uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: Install dependencies
        run: |
          go get ./...
      # Free up disk space before running tests
      - name: Free up disk space
        run: |
          # Display available disk space
          df -h
          
          # Remove unnecessary large directories
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          
          # Clean Docker images
          docker system prune -af
          
          # Display available disk space after cleanup
          df -h

      - name: Run unit tests
        run: |
          go test -coverpkg=./... -coverprofile=coverage_unit_tests.out -covermode=atomic ./app/... ./common/... ./tests/utils/...
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Set environment variables for pre-built images and BuildKit
      - name: Set environment variables
        run: |
          echo "MSSQL_IMAGE=ghcr.io/ydb-platform/fq-connector-go/ms_sql_server-test:latest" >> $GITHUB_ENV
          echo "OPENSEARCH_IMAGE=ghcr.io/ydb-platform/fq-connector-go/opensearch-test:latest" >> $GITHUB_ENV
          echo "BUILDKIT_INLINE_CACHE=1" >> $GITHUB_ENV
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      # Pull pre-built images to speed up the process using docker compose
      - name: Pull Docker images
        run: |
          # Pull all images defined in docker-compose.yaml
          docker compose -f tests/infra/datasource/docker-compose.yaml pull

      - name: Setup integration tests
        uses: hoverkraft-tech/compose-action@v2.0.1
        with:
          compose-file: "tests/infra/datasource/docker-compose.yaml"
          up-flags: "--build"
          down-flags: "--volumes"
      - name: Run integration tests
        run: |
          # Clean Go cache to free up space
          go clean -cache -testcache
          
          # Compile test binary with reduced debug info to save space
          go test -c -o fq-connector-go-tests -coverpkg=./... -covermode=atomic -ldflags="-w -s" ./tests
          
          # Check MS SQL Server logs
          docker logs runner-fq-connector-go-tests-ms_sql_server || true
          
          # Run tests with parallelism enabled
          ./fq-connector-go-tests -projectPath=$(pwd) -test.coverprofile=coverage_integration_tests.out -test.parallel=8 -test.timeout=30m
      - name: Union coverage
        run: |
          cat coverage_unit_tests.out > coverage.out
          cat coverage_integration_tests.out | grep -v 'mode: atomic' >> coverage.out
          go tool cover -func=coverage.out
          rm coverage_unit_tests.out coverage_integration_tests.out
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4-beta
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
      - name: Build
        run: |
          # FIXME: this script can't handle backticks in commit messages
          # git fetch --prune --unshallow
          # go run ./tools/version git
          GOOS=linux go build -v -o fq-connector-go ./app
