// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: log_group_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogGroupService_GetReadingEndpoint_FullMethodName = "/logging.v1.LogGroupService/GetReadingEndpoint"
)

// LogGroupServiceClient is the client API for LogGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogGroupServiceClient interface {
	GetReadingEndpoint(ctx context.Context, in *GetReadingEndpointRequest, opts ...grpc.CallOption) (*GetReadingEndpointResponse, error)
}

type logGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogGroupServiceClient(cc grpc.ClientConnInterface) LogGroupServiceClient {
	return &logGroupServiceClient{cc}
}

func (c *logGroupServiceClient) GetReadingEndpoint(ctx context.Context, in *GetReadingEndpointRequest, opts ...grpc.CallOption) (*GetReadingEndpointResponse, error) {
	out := new(GetReadingEndpointResponse)
	err := c.cc.Invoke(ctx, LogGroupService_GetReadingEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogGroupServiceServer is the server API for LogGroupService service.
// All implementations must embed UnimplementedLogGroupServiceServer
// for forward compatibility
type LogGroupServiceServer interface {
	GetReadingEndpoint(context.Context, *GetReadingEndpointRequest) (*GetReadingEndpointResponse, error)
	mustEmbedUnimplementedLogGroupServiceServer()
}

// UnimplementedLogGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogGroupServiceServer struct {
}

func (UnimplementedLogGroupServiceServer) GetReadingEndpoint(context.Context, *GetReadingEndpointRequest) (*GetReadingEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadingEndpoint not implemented")
}
func (UnimplementedLogGroupServiceServer) mustEmbedUnimplementedLogGroupServiceServer() {}

// UnsafeLogGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogGroupServiceServer will
// result in compilation errors.
type UnsafeLogGroupServiceServer interface {
	mustEmbedUnimplementedLogGroupServiceServer()
}

func RegisterLogGroupServiceServer(s grpc.ServiceRegistrar, srv LogGroupServiceServer) {
	s.RegisterService(&LogGroupService_ServiceDesc, srv)
}

func _LogGroupService_GetReadingEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadingEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogGroupServiceServer).GetReadingEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogGroupService_GetReadingEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogGroupServiceServer).GetReadingEndpoint(ctx, req.(*GetReadingEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogGroupService_ServiceDesc is the grpc.ServiceDesc for LogGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logging.v1.LogGroupService",
	HandlerType: (*LogGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReadingEndpoint",
			Handler:    _LogGroupService_GetReadingEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log_group_service.proto",
}
