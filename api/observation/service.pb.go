// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: api/observation/service.proto

package observation

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protos "github.com/ydb-platform/fq-connector-go/api/service/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QueryState represents the state of a query
type QueryState int32

const (
	QueryState_QUERY_STATE_UNSPECIFIED QueryState = 0
	QueryState_QUERY_STATE_RUNNING     QueryState = 1
	QueryState_QUERY_STATE_FINISHED    QueryState = 2
	QueryState_QUERY_STATE_CANCELED    QueryState = 3
)

// Enum value maps for QueryState.
var (
	QueryState_name = map[int32]string{
		0: "QUERY_STATE_UNSPECIFIED",
		1: "QUERY_STATE_RUNNING",
		2: "QUERY_STATE_FINISHED",
		3: "QUERY_STATE_CANCELED",
	}
	QueryState_value = map[string]int32{
		"QUERY_STATE_UNSPECIFIED": 0,
		"QUERY_STATE_RUNNING":     1,
		"QUERY_STATE_FINISHED":    2,
		"QUERY_STATE_CANCELED":    3,
	}
)

func (x QueryState) Enum() *QueryState {
	p := new(QueryState)
	*p = x
	return p
}

func (x QueryState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_observation_service_proto_enumTypes[0].Descriptor()
}

func (QueryState) Type() protoreflect.EnumType {
	return &file_api_observation_service_proto_enumTypes[0]
}

func (x QueryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryState.Descriptor instead.
func (QueryState) EnumDescriptor() ([]byte, []int) {
	return file_api_observation_service_proto_rawDescGZIP(), []int{0}
}

// IncomingQuery represents an incoming query from a client
type IncomingQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the incoming query
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of data source being queried
	DataSourceKind string `protobuf:"bytes,2,opt,name=data_source_kind,json=dataSourceKind,proto3" json:"data_source_kind,omitempty"`
	// Number of rows read by this query
	RowsRead int64 `protobuf:"varint,3,opt,name=rows_read,json=rowsRead,proto3" json:"rows_read,omitempty"`
	// Number of bytes read by this query
	BytesRead int64 `protobuf:"varint,4,opt,name=bytes_read,json=bytesRead,proto3" json:"bytes_read,omitempty"`
	// Current state of the query
	State QueryState `protobuf:"varint,5,opt,name=state,proto3,enum=NYql.Connector.Observation.QueryState" json:"state,omitempty"`
	// When the query was created
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// When the query finished (if applicable)
	FinishedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	// Error message if the query failed
	Error         string `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncomingQuery) Reset() {
	*x = IncomingQuery{}
	mi := &file_api_observation_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncomingQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomingQuery) ProtoMessage() {}

func (x *IncomingQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_observation_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomingQuery.ProtoReflect.Descriptor instead.
func (*IncomingQuery) Descriptor() ([]byte, []int) {
	return file_api_observation_service_proto_rawDescGZIP(), []int{0}
}

func (x *IncomingQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IncomingQuery) GetDataSourceKind() string {
	if x != nil {
		return x.DataSourceKind
	}
	return ""
}

func (x *IncomingQuery) GetRowsRead() int64 {
	if x != nil {
		return x.RowsRead
	}
	return 0
}

func (x *IncomingQuery) GetBytesRead() int64 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

func (x *IncomingQuery) GetState() QueryState {
	if x != nil {
		return x.State
	}
	return QueryState_QUERY_STATE_UNSPECIFIED
}

func (x *IncomingQuery) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *IncomingQuery) GetFinishedAt() *timestamp.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *IncomingQuery) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// OutgoingQuery represents an outgoing query to a data source
type OutgoingQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the outgoing query
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the parent incoming query
	IncomingQueryId string `protobuf:"bytes,2,opt,name=incoming_query_id,json=incomingQueryId,proto3" json:"incoming_query_id,omitempty"`
	// Name of the database being queried
	DatabaseName string `protobuf:"bytes,3,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	// Endpoint of the database being queried
	DatabaseEndpoint string `protobuf:"bytes,4,opt,name=database_endpoint,json=databaseEndpoint,proto3" json:"database_endpoint,omitempty"`
	// The actual query text sent to the data source
	QueryText string `protobuf:"bytes,5,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`
	// Arguments passed with the query (serialized)
	QueryArgs string `protobuf:"bytes,6,opt,name=query_args,json=queryArgs,proto3" json:"query_args,omitempty"`
	// Current state of the query
	State QueryState `protobuf:"varint,7,opt,name=state,proto3,enum=NYql.Connector.Observation.QueryState" json:"state,omitempty"`
	// When the query was created
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// When the query finished (if applicable)
	FinishedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	// Number of rows read by this query
	RowsRead int64 `protobuf:"varint,10,opt,name=rows_read,json=rowsRead,proto3" json:"rows_read,omitempty"`
	// Error message if the query failed
	Error         string `protobuf:"bytes,11,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutgoingQuery) Reset() {
	*x = OutgoingQuery{}
	mi := &file_api_observation_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutgoingQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingQuery) ProtoMessage() {}

func (x *OutgoingQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_observation_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutgoingQuery.ProtoReflect.Descriptor instead.
func (*OutgoingQuery) Descriptor() ([]byte, []int) {
	return file_api_observation_service_proto_rawDescGZIP(), []int{1}
}

func (x *OutgoingQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OutgoingQuery) GetIncomingQueryId() string {
	if x != nil {
		return x.IncomingQueryId
	}
	return ""
}

func (x *OutgoingQuery) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *OutgoingQuery) GetDatabaseEndpoint() string {
	if x != nil {
		return x.DatabaseEndpoint
	}
	return ""
}

func (x *OutgoingQuery) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *OutgoingQuery) GetQueryArgs() string {
	if x != nil {
		return x.QueryArgs
	}
	return ""
}

func (x *OutgoingQuery) GetState() QueryState {
	if x != nil {
		return x.State
	}
	return QueryState_QUERY_STATE_UNSPECIFIED
}

func (x *OutgoingQuery) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OutgoingQuery) GetFinishedAt() *timestamp.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *OutgoingQuery) GetRowsRead() int64 {
	if x != nil {
		return x.RowsRead
	}
	return 0
}

func (x *OutgoingQuery) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// ListIncomingQueriesRequest is the request message for ListIncomingQueries
type ListIncomingQueriesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter by query state
	// If QUERY_STATE_UNSPECIFIED, return queries in any state
	State QueryState `protobuf:"varint,1,opt,name=state,proto3,enum=NYql.Connector.Observation.QueryState" json:"state,omitempty"`
	// Maximum number of queries to return
	// If 0, no limit is applied
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Number of queries to skip
	Offset        int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListIncomingQueriesRequest) Reset() {
	*x = ListIncomingQueriesRequest{}
	mi := &file_api_observation_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIncomingQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIncomingQueriesRequest) ProtoMessage() {}

func (x *ListIncomingQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_observation_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIncomingQueriesRequest.ProtoReflect.Descriptor instead.
func (*ListIncomingQueriesRequest) Descriptor() ([]byte, []int) {
	return file_api_observation_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListIncomingQueriesRequest) GetState() QueryState {
	if x != nil {
		return x.State
	}
	return QueryState_QUERY_STATE_UNSPECIFIED
}

func (x *ListIncomingQueriesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListIncomingQueriesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// IncomingQueryResponse is the response message for a single incoming query
type ListIncomingQueriesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The incoming query
	Query *IncomingQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Error information if there was a problem retrieving the query
	Error         *protos.TError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListIncomingQueriesResponse) Reset() {
	*x = ListIncomingQueriesResponse{}
	mi := &file_api_observation_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIncomingQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIncomingQueriesResponse) ProtoMessage() {}

func (x *ListIncomingQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_observation_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIncomingQueriesResponse.ProtoReflect.Descriptor instead.
func (*ListIncomingQueriesResponse) Descriptor() ([]byte, []int) {
	return file_api_observation_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListIncomingQueriesResponse) GetQuery() *IncomingQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ListIncomingQueriesResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

// ListOutgoingQueriesRequest is the request message for ListOutgoingQueries
type ListOutgoingQueriesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter by parent incoming query ID
	// If 0, return queries for all incoming queries
	IncomingQueryId string `protobuf:"bytes,1,opt,name=incoming_query_id,json=incomingQueryId,proto3" json:"incoming_query_id,omitempty"`
	// Filter by query state
	// If QUERY_STATE_UNSPECIFIED, return queries in any state
	State QueryState `protobuf:"varint,2,opt,name=state,proto3,enum=NYql.Connector.Observation.QueryState" json:"state,omitempty"`
	// Maximum number of queries to return
	// If 0, no limit is applied
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Number of queries to skip
	Offset        int32 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOutgoingQueriesRequest) Reset() {
	*x = ListOutgoingQueriesRequest{}
	mi := &file_api_observation_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOutgoingQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOutgoingQueriesRequest) ProtoMessage() {}

func (x *ListOutgoingQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_observation_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOutgoingQueriesRequest.ProtoReflect.Descriptor instead.
func (*ListOutgoingQueriesRequest) Descriptor() ([]byte, []int) {
	return file_api_observation_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListOutgoingQueriesRequest) GetIncomingQueryId() string {
	if x != nil {
		return x.IncomingQueryId
	}
	return ""
}

func (x *ListOutgoingQueriesRequest) GetState() QueryState {
	if x != nil {
		return x.State
	}
	return QueryState_QUERY_STATE_UNSPECIFIED
}

func (x *ListOutgoingQueriesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListOutgoingQueriesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// OutgoingQueryResponse is the response message for a single outgoing query
type ListOutgoingQueriesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The outgoing query
	Query *OutgoingQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Error information if there was a problem retrieving the query
	Error         *protos.TError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOutgoingQueriesResponse) Reset() {
	*x = ListOutgoingQueriesResponse{}
	mi := &file_api_observation_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOutgoingQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOutgoingQueriesResponse) ProtoMessage() {}

func (x *ListOutgoingQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_observation_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOutgoingQueriesResponse.ProtoReflect.Descriptor instead.
func (*ListOutgoingQueriesResponse) Descriptor() ([]byte, []int) {
	return file_api_observation_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListOutgoingQueriesResponse) GetQuery() *OutgoingQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ListOutgoingQueriesResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_api_observation_service_proto protoreflect.FileDescriptor

var file_api_observation_service_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1a, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4e, 0x79, 0x64,
	0x62, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 0x79, 0x71, 0x6c, 0x2f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x02, 0x0a,
	0x0d, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x77,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xc4, 0x03, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x3c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb4, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x92,
	0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2a, 0x76, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xae, 0x02, 0x0a, 0x12,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x4e, 0x59, 0x71,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x8a, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x39, 0x5a, 0x37,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x66, 0x71, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_observation_service_proto_rawDescOnce sync.Once
	file_api_observation_service_proto_rawDescData []byte
)

func file_api_observation_service_proto_rawDescGZIP() []byte {
	file_api_observation_service_proto_rawDescOnce.Do(func() {
		file_api_observation_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_observation_service_proto_rawDesc), len(file_api_observation_service_proto_rawDesc)))
	})
	return file_api_observation_service_proto_rawDescData
}

var file_api_observation_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_observation_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_api_observation_service_proto_goTypes = []any{
	(QueryState)(0),                     // 0: NYql.Connector.Observation.QueryState
	(*IncomingQuery)(nil),               // 1: NYql.Connector.Observation.IncomingQuery
	(*OutgoingQuery)(nil),               // 2: NYql.Connector.Observation.OutgoingQuery
	(*ListIncomingQueriesRequest)(nil),  // 3: NYql.Connector.Observation.ListIncomingQueriesRequest
	(*ListIncomingQueriesResponse)(nil), // 4: NYql.Connector.Observation.ListIncomingQueriesResponse
	(*ListOutgoingQueriesRequest)(nil),  // 5: NYql.Connector.Observation.ListOutgoingQueriesRequest
	(*ListOutgoingQueriesResponse)(nil), // 6: NYql.Connector.Observation.ListOutgoingQueriesResponse
	(*timestamp.Timestamp)(nil),         // 7: google.protobuf.Timestamp
	(*protos.TError)(nil),               // 8: NYql.NConnector.NApi.TError
}
var file_api_observation_service_proto_depIdxs = []int32{
	0,  // 0: NYql.Connector.Observation.IncomingQuery.state:type_name -> NYql.Connector.Observation.QueryState
	7,  // 1: NYql.Connector.Observation.IncomingQuery.created_at:type_name -> google.protobuf.Timestamp
	7,  // 2: NYql.Connector.Observation.IncomingQuery.finished_at:type_name -> google.protobuf.Timestamp
	0,  // 3: NYql.Connector.Observation.OutgoingQuery.state:type_name -> NYql.Connector.Observation.QueryState
	7,  // 4: NYql.Connector.Observation.OutgoingQuery.created_at:type_name -> google.protobuf.Timestamp
	7,  // 5: NYql.Connector.Observation.OutgoingQuery.finished_at:type_name -> google.protobuf.Timestamp
	0,  // 6: NYql.Connector.Observation.ListIncomingQueriesRequest.state:type_name -> NYql.Connector.Observation.QueryState
	1,  // 7: NYql.Connector.Observation.ListIncomingQueriesResponse.query:type_name -> NYql.Connector.Observation.IncomingQuery
	8,  // 8: NYql.Connector.Observation.ListIncomingQueriesResponse.error:type_name -> NYql.NConnector.NApi.TError
	0,  // 9: NYql.Connector.Observation.ListOutgoingQueriesRequest.state:type_name -> NYql.Connector.Observation.QueryState
	2,  // 10: NYql.Connector.Observation.ListOutgoingQueriesResponse.query:type_name -> NYql.Connector.Observation.OutgoingQuery
	8,  // 11: NYql.Connector.Observation.ListOutgoingQueriesResponse.error:type_name -> NYql.NConnector.NApi.TError
	3,  // 12: NYql.Connector.Observation.ObservationService.ListIncomingQueries:input_type -> NYql.Connector.Observation.ListIncomingQueriesRequest
	5,  // 13: NYql.Connector.Observation.ObservationService.ListOutgoingQueries:input_type -> NYql.Connector.Observation.ListOutgoingQueriesRequest
	4,  // 14: NYql.Connector.Observation.ObservationService.ListIncomingQueries:output_type -> NYql.Connector.Observation.ListIncomingQueriesResponse
	6,  // 15: NYql.Connector.Observation.ObservationService.ListOutgoingQueries:output_type -> NYql.Connector.Observation.ListOutgoingQueriesResponse
	14, // [14:16] is the sub-list for method output_type
	12, // [12:14] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_api_observation_service_proto_init() }
func file_api_observation_service_proto_init() {
	if File_api_observation_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_observation_service_proto_rawDesc), len(file_api_observation_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_observation_service_proto_goTypes,
		DependencyIndexes: file_api_observation_service_proto_depIdxs,
		EnumInfos:         file_api_observation_service_proto_enumTypes,
		MessageInfos:      file_api_observation_service_proto_msgTypes,
	}.Build()
	File_api_observation_service_proto = out.File
	file_api_observation_service_proto_goTypes = nil
	file_api_observation_service_proto_depIdxs = nil
}
