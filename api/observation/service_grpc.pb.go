// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api/observation/service.proto

package observation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ObservationService_ListIncomingQueries_FullMethodName                          = "/NYql.Connector.Observation.ObservationService/ListIncomingQueries"
	ObservationService_ListRunningIncomingQueries_FullMethodName                   = "/NYql.Connector.Observation.ObservationService/ListRunningIncomingQueries"
	ObservationService_ListOutgoingQueries_FullMethodName                          = "/NYql.Connector.Observation.ObservationService/ListOutgoingQueries"
	ObservationService_ListRunningOutgoingQueries_FullMethodName                   = "/NYql.Connector.Observation.ObservationService/ListRunningOutgoingQueries"
	ObservationService_ListSimilarOutgoingQueriesWithDifferentStats_FullMethodName = "/NYql.Connector.Observation.ObservationService/ListSimilarOutgoingQueriesWithDifferentStats"
)

// ObservationServiceClient is the client API for ObservationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObservationServiceClient interface {
	// ListIncomingQueries retrieves a list of incoming queries with pagination
	ListIncomingQueries(ctx context.Context, in *ListIncomingQueriesRequest, opts ...grpc.CallOption) (*ListIncomingQueriesResponse, error)
	// ListRunningIncomingQueries retrieves all currently running incoming queries
	ListRunningIncomingQueries(ctx context.Context, in *ListRunningIncomingQueriesRequest, opts ...grpc.CallOption) (*ListIncomingQueriesResponse, error)
	// ListOutgoingQueries retrieves a list of outgoing queries with pagination
	ListOutgoingQueries(ctx context.Context, in *ListOutgoingQueriesRequest, opts ...grpc.CallOption) (*ListOutgoingQueriesResponse, error)
	// ListRunningOutgoingQueries retrieves all currently running outgoing queries
	ListRunningOutgoingQueries(ctx context.Context, in *ListRunningOutgoingQueriesRequest, opts ...grpc.CallOption) (*ListOutgoingQueriesResponse, error)
	// ListSimilarOutgoingQueriesWithDifferentStats finds groups of similar outgoing queries with different row counts
	ListSimilarOutgoingQueriesWithDifferentStats(ctx context.Context, in *ListSimilarOutgoingQueriesWithDifferentStatsRequest, opts ...grpc.CallOption) (*ListSimilarOutgoingQueriesWithDifferentStatsResponse, error)
}

type observationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObservationServiceClient(cc grpc.ClientConnInterface) ObservationServiceClient {
	return &observationServiceClient{cc}
}

func (c *observationServiceClient) ListIncomingQueries(ctx context.Context, in *ListIncomingQueriesRequest, opts ...grpc.CallOption) (*ListIncomingQueriesResponse, error) {
	out := new(ListIncomingQueriesResponse)
	err := c.cc.Invoke(ctx, ObservationService_ListIncomingQueries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observationServiceClient) ListRunningIncomingQueries(ctx context.Context, in *ListRunningIncomingQueriesRequest, opts ...grpc.CallOption) (*ListIncomingQueriesResponse, error) {
	out := new(ListIncomingQueriesResponse)
	err := c.cc.Invoke(ctx, ObservationService_ListRunningIncomingQueries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observationServiceClient) ListOutgoingQueries(ctx context.Context, in *ListOutgoingQueriesRequest, opts ...grpc.CallOption) (*ListOutgoingQueriesResponse, error) {
	out := new(ListOutgoingQueriesResponse)
	err := c.cc.Invoke(ctx, ObservationService_ListOutgoingQueries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observationServiceClient) ListRunningOutgoingQueries(ctx context.Context, in *ListRunningOutgoingQueriesRequest, opts ...grpc.CallOption) (*ListOutgoingQueriesResponse, error) {
	out := new(ListOutgoingQueriesResponse)
	err := c.cc.Invoke(ctx, ObservationService_ListRunningOutgoingQueries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observationServiceClient) ListSimilarOutgoingQueriesWithDifferentStats(ctx context.Context, in *ListSimilarOutgoingQueriesWithDifferentStatsRequest, opts ...grpc.CallOption) (*ListSimilarOutgoingQueriesWithDifferentStatsResponse, error) {
	out := new(ListSimilarOutgoingQueriesWithDifferentStatsResponse)
	err := c.cc.Invoke(ctx, ObservationService_ListSimilarOutgoingQueriesWithDifferentStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObservationServiceServer is the server API for ObservationService service.
// All implementations must embed UnimplementedObservationServiceServer
// for forward compatibility
type ObservationServiceServer interface {
	// ListIncomingQueries retrieves a list of incoming queries with pagination
	ListIncomingQueries(context.Context, *ListIncomingQueriesRequest) (*ListIncomingQueriesResponse, error)
	// ListRunningIncomingQueries retrieves all currently running incoming queries
	ListRunningIncomingQueries(context.Context, *ListRunningIncomingQueriesRequest) (*ListIncomingQueriesResponse, error)
	// ListOutgoingQueries retrieves a list of outgoing queries with pagination
	ListOutgoingQueries(context.Context, *ListOutgoingQueriesRequest) (*ListOutgoingQueriesResponse, error)
	// ListRunningOutgoingQueries retrieves all currently running outgoing queries
	ListRunningOutgoingQueries(context.Context, *ListRunningOutgoingQueriesRequest) (*ListOutgoingQueriesResponse, error)
	// ListSimilarOutgoingQueriesWithDifferentStats finds groups of similar outgoing queries with different row counts
	ListSimilarOutgoingQueriesWithDifferentStats(context.Context, *ListSimilarOutgoingQueriesWithDifferentStatsRequest) (*ListSimilarOutgoingQueriesWithDifferentStatsResponse, error)
	mustEmbedUnimplementedObservationServiceServer()
}

// UnimplementedObservationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedObservationServiceServer struct {
}

func (UnimplementedObservationServiceServer) ListIncomingQueries(context.Context, *ListIncomingQueriesRequest) (*ListIncomingQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIncomingQueries not implemented")
}
func (UnimplementedObservationServiceServer) ListRunningIncomingQueries(context.Context, *ListRunningIncomingQueriesRequest) (*ListIncomingQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunningIncomingQueries not implemented")
}
func (UnimplementedObservationServiceServer) ListOutgoingQueries(context.Context, *ListOutgoingQueriesRequest) (*ListOutgoingQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOutgoingQueries not implemented")
}
func (UnimplementedObservationServiceServer) ListRunningOutgoingQueries(context.Context, *ListRunningOutgoingQueriesRequest) (*ListOutgoingQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunningOutgoingQueries not implemented")
}
func (UnimplementedObservationServiceServer) ListSimilarOutgoingQueriesWithDifferentStats(context.Context, *ListSimilarOutgoingQueriesWithDifferentStatsRequest) (*ListSimilarOutgoingQueriesWithDifferentStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSimilarOutgoingQueriesWithDifferentStats not implemented")
}
func (UnimplementedObservationServiceServer) mustEmbedUnimplementedObservationServiceServer() {}

// UnsafeObservationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObservationServiceServer will
// result in compilation errors.
type UnsafeObservationServiceServer interface {
	mustEmbedUnimplementedObservationServiceServer()
}

func RegisterObservationServiceServer(s grpc.ServiceRegistrar, srv ObservationServiceServer) {
	s.RegisterService(&ObservationService_ServiceDesc, srv)
}

func _ObservationService_ListIncomingQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIncomingQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservationServiceServer).ListIncomingQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservationService_ListIncomingQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservationServiceServer).ListIncomingQueries(ctx, req.(*ListIncomingQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObservationService_ListRunningIncomingQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunningIncomingQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservationServiceServer).ListRunningIncomingQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservationService_ListRunningIncomingQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservationServiceServer).ListRunningIncomingQueries(ctx, req.(*ListRunningIncomingQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObservationService_ListOutgoingQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOutgoingQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservationServiceServer).ListOutgoingQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservationService_ListOutgoingQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservationServiceServer).ListOutgoingQueries(ctx, req.(*ListOutgoingQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObservationService_ListRunningOutgoingQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunningOutgoingQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservationServiceServer).ListRunningOutgoingQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservationService_ListRunningOutgoingQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservationServiceServer).ListRunningOutgoingQueries(ctx, req.(*ListRunningOutgoingQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObservationService_ListSimilarOutgoingQueriesWithDifferentStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSimilarOutgoingQueriesWithDifferentStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservationServiceServer).ListSimilarOutgoingQueriesWithDifferentStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservationService_ListSimilarOutgoingQueriesWithDifferentStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservationServiceServer).ListSimilarOutgoingQueriesWithDifferentStats(ctx, req.(*ListSimilarOutgoingQueriesWithDifferentStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObservationService_ServiceDesc is the grpc.ServiceDesc for ObservationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObservationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NYql.Connector.Observation.ObservationService",
	HandlerType: (*ObservationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIncomingQueries",
			Handler:    _ObservationService_ListIncomingQueries_Handler,
		},
		{
			MethodName: "ListRunningIncomingQueries",
			Handler:    _ObservationService_ListRunningIncomingQueries_Handler,
		},
		{
			MethodName: "ListOutgoingQueries",
			Handler:    _ObservationService_ListOutgoingQueries_Handler,
		},
		{
			MethodName: "ListRunningOutgoingQueries",
			Handler:    _ObservationService_ListRunningOutgoingQueries_Handler,
		},
		{
			MethodName: "ListSimilarOutgoingQueriesWithDifferentStats",
			Handler:    _ObservationService_ListSimilarOutgoingQueriesWithDifferentStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/observation/service.proto",
}
