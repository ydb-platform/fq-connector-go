// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: ydb/library/yql/providers/generic/connector/api/service/connector.proto

package service

import (
	context "context"
	protos "github.com/ydb-platform/fq-connector-go/api/service/protos"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Connector_ListTables_FullMethodName    = "/NYql.NConnector.NApi.Connector/ListTables"
	Connector_DescribeTable_FullMethodName = "/NYql.NConnector.NApi.Connector/DescribeTable"
	Connector_ListSplits_FullMethodName    = "/NYql.NConnector.NApi.Connector/ListSplits"
	Connector_ReadSplits_FullMethodName    = "/NYql.NConnector.NApi.Connector/ReadSplits"
)

// ConnectorClient is the client API for Connector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorClient interface {
	// Deprecated: Do not use.
	// ListTables returns the list of tables existing in a particular database.
	ListTables(ctx context.Context, in *protos.TListTablesRequest, opts ...grpc.CallOption) (Connector_ListTablesClient, error)
	// DescribeTable returns table's schema.
	DescribeTable(ctx context.Context, in *protos.TDescribeTableRequest, opts ...grpc.CallOption) (*protos.TDescribeTableResponse, error)
	// ListSplits asks Connector to partition the data that are going to be read
	// into elementary parts suitable for parallel reading.
	ListSplits(ctx context.Context, in *protos.TListSplitsRequest, opts ...grpc.CallOption) (Connector_ListSplitsClient, error)
	// ReadSplits reads data associated with splits.
	ReadSplits(ctx context.Context, in *protos.TReadSplitsRequest, opts ...grpc.CallOption) (Connector_ReadSplitsClient, error)
}

type connectorClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorClient(cc grpc.ClientConnInterface) ConnectorClient {
	return &connectorClient{cc}
}

// Deprecated: Do not use.
func (c *connectorClient) ListTables(ctx context.Context, in *protos.TListTablesRequest, opts ...grpc.CallOption) (Connector_ListTablesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Connector_ServiceDesc.Streams[0], Connector_ListTables_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorListTablesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Connector_ListTablesClient interface {
	Recv() (*protos.TListTablesResponse, error)
	grpc.ClientStream
}

type connectorListTablesClient struct {
	grpc.ClientStream
}

func (x *connectorListTablesClient) Recv() (*protos.TListTablesResponse, error) {
	m := new(protos.TListTablesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *connectorClient) DescribeTable(ctx context.Context, in *protos.TDescribeTableRequest, opts ...grpc.CallOption) (*protos.TDescribeTableResponse, error) {
	out := new(protos.TDescribeTableResponse)
	err := c.cc.Invoke(ctx, Connector_DescribeTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorClient) ListSplits(ctx context.Context, in *protos.TListSplitsRequest, opts ...grpc.CallOption) (Connector_ListSplitsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Connector_ServiceDesc.Streams[1], Connector_ListSplits_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorListSplitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Connector_ListSplitsClient interface {
	Recv() (*protos.TListSplitsResponse, error)
	grpc.ClientStream
}

type connectorListSplitsClient struct {
	grpc.ClientStream
}

func (x *connectorListSplitsClient) Recv() (*protos.TListSplitsResponse, error) {
	m := new(protos.TListSplitsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *connectorClient) ReadSplits(ctx context.Context, in *protos.TReadSplitsRequest, opts ...grpc.CallOption) (Connector_ReadSplitsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Connector_ServiceDesc.Streams[2], Connector_ReadSplits_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorReadSplitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Connector_ReadSplitsClient interface {
	Recv() (*protos.TReadSplitsResponse, error)
	grpc.ClientStream
}

type connectorReadSplitsClient struct {
	grpc.ClientStream
}

func (x *connectorReadSplitsClient) Recv() (*protos.TReadSplitsResponse, error) {
	m := new(protos.TReadSplitsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectorServer is the server API for Connector service.
// All implementations must embed UnimplementedConnectorServer
// for forward compatibility
type ConnectorServer interface {
	// Deprecated: Do not use.
	// ListTables returns the list of tables existing in a particular database.
	ListTables(*protos.TListTablesRequest, Connector_ListTablesServer) error
	// DescribeTable returns table's schema.
	DescribeTable(context.Context, *protos.TDescribeTableRequest) (*protos.TDescribeTableResponse, error)
	// ListSplits asks Connector to partition the data that are going to be read
	// into elementary parts suitable for parallel reading.
	ListSplits(*protos.TListSplitsRequest, Connector_ListSplitsServer) error
	// ReadSplits reads data associated with splits.
	ReadSplits(*protos.TReadSplitsRequest, Connector_ReadSplitsServer) error
	mustEmbedUnimplementedConnectorServer()
}

// UnimplementedConnectorServer must be embedded to have forward compatible implementations.
type UnimplementedConnectorServer struct {
}

func (UnimplementedConnectorServer) ListTables(*protos.TListTablesRequest, Connector_ListTablesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (UnimplementedConnectorServer) DescribeTable(context.Context, *protos.TDescribeTableRequest) (*protos.TDescribeTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTable not implemented")
}
func (UnimplementedConnectorServer) ListSplits(*protos.TListSplitsRequest, Connector_ListSplitsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSplits not implemented")
}
func (UnimplementedConnectorServer) ReadSplits(*protos.TReadSplitsRequest, Connector_ReadSplitsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadSplits not implemented")
}
func (UnimplementedConnectorServer) mustEmbedUnimplementedConnectorServer() {}

// UnsafeConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorServer will
// result in compilation errors.
type UnsafeConnectorServer interface {
	mustEmbedUnimplementedConnectorServer()
}

func RegisterConnectorServer(s grpc.ServiceRegistrar, srv ConnectorServer) {
	s.RegisterService(&Connector_ServiceDesc, srv)
}

func _Connector_ListTables_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(protos.TListTablesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectorServer).ListTables(m, &connectorListTablesServer{stream})
}

type Connector_ListTablesServer interface {
	Send(*protos.TListTablesResponse) error
	grpc.ServerStream
}

type connectorListTablesServer struct {
	grpc.ServerStream
}

func (x *connectorListTablesServer) Send(m *protos.TListTablesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Connector_DescribeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDescribeTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServer).DescribeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Connector_DescribeTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServer).DescribeTable(ctx, req.(*protos.TDescribeTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connector_ListSplits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(protos.TListSplitsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectorServer).ListSplits(m, &connectorListSplitsServer{stream})
}

type Connector_ListSplitsServer interface {
	Send(*protos.TListSplitsResponse) error
	grpc.ServerStream
}

type connectorListSplitsServer struct {
	grpc.ServerStream
}

func (x *connectorListSplitsServer) Send(m *protos.TListSplitsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Connector_ReadSplits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(protos.TReadSplitsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectorServer).ReadSplits(m, &connectorReadSplitsServer{stream})
}

type Connector_ReadSplitsServer interface {
	Send(*protos.TReadSplitsResponse) error
	grpc.ServerStream
}

type connectorReadSplitsServer struct {
	grpc.ServerStream
}

func (x *connectorReadSplitsServer) Send(m *protos.TReadSplitsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Connector_ServiceDesc is the grpc.ServiceDesc for Connector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Connector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NYql.NConnector.NApi.Connector",
	HandlerType: (*ConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeTable",
			Handler:    _Connector_DescribeTable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTables",
			Handler:       _Connector_ListTables_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSplits",
			Handler:       _Connector_ListSplits_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadSplits",
			Handler:       _Connector_ReadSplits_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ydb/library/yql/providers/generic/connector/api/service/connector.proto",
}
