// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: ydb/library/yql/providers/generic/connector/api/service/protos/connector.proto

package protos

import (
	common "github.com/ydb-platform/fq-connector-go/api/common"
	Ydb "github.com/ydb-platform/ydb-go-genproto/protos/Ydb"
	Ydb_Issue "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Issue"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EDateTimeFormat int32

const (
	EDateTimeFormat_DATE_TIME_FORMAT_UNSPECIFIED EDateTimeFormat = 0
	EDateTimeFormat_STRING_FORMAT                EDateTimeFormat = 1
	EDateTimeFormat_YQL_FORMAT                   EDateTimeFormat = 2
)

// Enum value maps for EDateTimeFormat.
var (
	EDateTimeFormat_name = map[int32]string{
		0: "DATE_TIME_FORMAT_UNSPECIFIED",
		1: "STRING_FORMAT",
		2: "YQL_FORMAT",
	}
	EDateTimeFormat_value = map[string]int32{
		"DATE_TIME_FORMAT_UNSPECIFIED": 0,
		"STRING_FORMAT":                1,
		"YQL_FORMAT":                   2,
	}
)

func (x EDateTimeFormat) Enum() *EDateTimeFormat {
	p := new(EDateTimeFormat)
	*p = x
	return p
}

func (x EDateTimeFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDateTimeFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[0].Descriptor()
}

func (EDateTimeFormat) Type() protoreflect.EnumType {
	return &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[0]
}

func (x EDateTimeFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDateTimeFormat.Descriptor instead.
func (EDateTimeFormat) EnumDescriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{0}
}

type TReadSplitsRequest_EMode int32

const (
	TReadSplitsRequest_MODE_UNSPECIFIED TReadSplitsRequest_EMode = 0
	// Connector will read splits in a single thread one by one.
	// The data will be returned in the order corresponding to the order of requested splits.
	TReadSplitsRequest_ORDERED TReadSplitsRequest_EMode = 1
	// Connector may read different splits concurrently and send the split fragments to the response stream
	// as soon as the data is obtained from the data source. Thus the stream is multiplexed between splits.
	TReadSplitsRequest_UNORDERED TReadSplitsRequest_EMode = 2
)

// Enum value maps for TReadSplitsRequest_EMode.
var (
	TReadSplitsRequest_EMode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "ORDERED",
		2: "UNORDERED",
	}
	TReadSplitsRequest_EMode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"ORDERED":          1,
		"UNORDERED":        2,
	}
)

func (x TReadSplitsRequest_EMode) Enum() *TReadSplitsRequest_EMode {
	p := new(TReadSplitsRequest_EMode)
	*p = x
	return p
}

func (x TReadSplitsRequest_EMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TReadSplitsRequest_EMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[1].Descriptor()
}

func (TReadSplitsRequest_EMode) Type() protoreflect.EnumType {
	return &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[1]
}

func (x TReadSplitsRequest_EMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TReadSplitsRequest_EMode.Descriptor instead.
func (TReadSplitsRequest_EMode) EnumDescriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{10, 0}
}

type TReadSplitsRequest_EFormat int32

const (
	TReadSplitsRequest_FORMAT_UNSPECIFIED TReadSplitsRequest_EFormat = 0
	// Arrow IPC Streaming format:
	// https://arrow.apache.org/docs/format/Columnar.html#ipc-streaming-format
	TReadSplitsRequest_ARROW_IPC_STREAMING TReadSplitsRequest_EFormat = 2
)

// Enum value maps for TReadSplitsRequest_EFormat.
var (
	TReadSplitsRequest_EFormat_name = map[int32]string{
		0: "FORMAT_UNSPECIFIED",
		2: "ARROW_IPC_STREAMING",
	}
	TReadSplitsRequest_EFormat_value = map[string]int32{
		"FORMAT_UNSPECIFIED":  0,
		"ARROW_IPC_STREAMING": 2,
	}
)

func (x TReadSplitsRequest_EFormat) Enum() *TReadSplitsRequest_EFormat {
	p := new(TReadSplitsRequest_EFormat)
	*p = x
	return p
}

func (x TReadSplitsRequest_EFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TReadSplitsRequest_EFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[2].Descriptor()
}

func (TReadSplitsRequest_EFormat) Type() protoreflect.EnumType {
	return &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[2]
}

func (x TReadSplitsRequest_EFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TReadSplitsRequest_EFormat.Descriptor instead.
func (TReadSplitsRequest_EFormat) EnumDescriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{10, 1}
}

type TReadSplitsRequest_EFiltering int32

const (
	TReadSplitsRequest_FILTERING_UNSPECIFIED TReadSplitsRequest_EFiltering = 0
	// If Connector cannot push down the predicate to the data source completely
	// (due to the lack of data type support, for example), it doesn't apply filter at all
	// and returns the full result of `SELECT columns FROM table` (no WHERE clause).
	// It's YDB's duty to filter the output on its own side.
	TReadSplitsRequest_FILTERING_OPTIONAL TReadSplitsRequest_EFiltering = 1
	// If Connector cannot push down the predicate to the data source completely,
	// it terminates the request and returns an error.
	TReadSplitsRequest_FILTERING_MANDATORY TReadSplitsRequest_EFiltering = 2
)

// Enum value maps for TReadSplitsRequest_EFiltering.
var (
	TReadSplitsRequest_EFiltering_name = map[int32]string{
		0: "FILTERING_UNSPECIFIED",
		1: "FILTERING_OPTIONAL",
		2: "FILTERING_MANDATORY",
	}
	TReadSplitsRequest_EFiltering_value = map[string]int32{
		"FILTERING_UNSPECIFIED": 0,
		"FILTERING_OPTIONAL":    1,
		"FILTERING_MANDATORY":   2,
	}
)

func (x TReadSplitsRequest_EFiltering) Enum() *TReadSplitsRequest_EFiltering {
	p := new(TReadSplitsRequest_EFiltering)
	*p = x
	return p
}

func (x TReadSplitsRequest_EFiltering) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TReadSplitsRequest_EFiltering) Descriptor() protoreflect.EnumDescriptor {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[3].Descriptor()
}

func (TReadSplitsRequest_EFiltering) Type() protoreflect.EnumType {
	return &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[3]
}

func (x TReadSplitsRequest_EFiltering) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TReadSplitsRequest_EFiltering.Descriptor instead.
func (TReadSplitsRequest_EFiltering) EnumDescriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{10, 2}
}

// An operation code.
type TExpression_TArithmeticalExpression_EOperation int32

const (
	TExpression_TArithmeticalExpression_EXPRESSION_OPERATION_UNSPECIFIED TExpression_TArithmeticalExpression_EOperation = 0
	TExpression_TArithmeticalExpression_MUL                              TExpression_TArithmeticalExpression_EOperation = 1 // left_value * right_value
	TExpression_TArithmeticalExpression_ADD                              TExpression_TArithmeticalExpression_EOperation = 2 // left_value + right_value
	TExpression_TArithmeticalExpression_SUB                              TExpression_TArithmeticalExpression_EOperation = 3 // left_value - right_value
	TExpression_TArithmeticalExpression_DIV                              TExpression_TArithmeticalExpression_EOperation = 7 // left_value / right_value
	TExpression_TArithmeticalExpression_MOD                              TExpression_TArithmeticalExpression_EOperation = 8 // left_value % right_value
	TExpression_TArithmeticalExpression_BIT_AND                          TExpression_TArithmeticalExpression_EOperation = 4 // left_value & right_value
	TExpression_TArithmeticalExpression_BIT_OR                           TExpression_TArithmeticalExpression_EOperation = 5 // left_value | right_value
	TExpression_TArithmeticalExpression_BIT_XOR                          TExpression_TArithmeticalExpression_EOperation = 6 // left_value ^ right_value
)

// Enum value maps for TExpression_TArithmeticalExpression_EOperation.
var (
	TExpression_TArithmeticalExpression_EOperation_name = map[int32]string{
		0: "EXPRESSION_OPERATION_UNSPECIFIED",
		1: "MUL",
		2: "ADD",
		3: "SUB",
		7: "DIV",
		8: "MOD",
		4: "BIT_AND",
		5: "BIT_OR",
		6: "BIT_XOR",
	}
	TExpression_TArithmeticalExpression_EOperation_value = map[string]int32{
		"EXPRESSION_OPERATION_UNSPECIFIED": 0,
		"MUL":                              1,
		"ADD":                              2,
		"SUB":                              3,
		"DIV":                              7,
		"MOD":                              8,
		"BIT_AND":                          4,
		"BIT_OR":                           5,
		"BIT_XOR":                          6,
	}
)

func (x TExpression_TArithmeticalExpression_EOperation) Enum() *TExpression_TArithmeticalExpression_EOperation {
	p := new(TExpression_TArithmeticalExpression_EOperation)
	*p = x
	return p
}

func (x TExpression_TArithmeticalExpression_EOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TExpression_TArithmeticalExpression_EOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[4].Descriptor()
}

func (TExpression_TArithmeticalExpression_EOperation) Type() protoreflect.EnumType {
	return &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[4]
}

func (x TExpression_TArithmeticalExpression_EOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TExpression_TArithmeticalExpression_EOperation.Descriptor instead.
func (TExpression_TArithmeticalExpression_EOperation) EnumDescriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 0, 0}
}

// An operation code.
type TPredicate_TComparison_EOperation int32

const (
	TPredicate_TComparison_COMPARISON_OPERATION_UNSPECIFIED TPredicate_TComparison_EOperation = 0
	TPredicate_TComparison_L                                TPredicate_TComparison_EOperation = 1 // "$column < value"
	TPredicate_TComparison_LE                               TPredicate_TComparison_EOperation = 2 // "$column <= value"
	TPredicate_TComparison_EQ                               TPredicate_TComparison_EOperation = 3 // "$column = value"
	TPredicate_TComparison_NE                               TPredicate_TComparison_EOperation = 4 // "$column != value"
	TPredicate_TComparison_GE                               TPredicate_TComparison_EOperation = 5 // "$column >= value"
	TPredicate_TComparison_G                                TPredicate_TComparison_EOperation = 6 // "$column > value"
	TPredicate_TComparison_IND                              TPredicate_TComparison_EOperation = 7 // "$column IS NOT DISTINCT value"
	TPredicate_TComparison_ID                               TPredicate_TComparison_EOperation = 8 // "$column IS DISTINCT value"
)

// Enum value maps for TPredicate_TComparison_EOperation.
var (
	TPredicate_TComparison_EOperation_name = map[int32]string{
		0: "COMPARISON_OPERATION_UNSPECIFIED",
		1: "L",
		2: "LE",
		3: "EQ",
		4: "NE",
		5: "GE",
		6: "G",
		7: "IND",
		8: "ID",
	}
	TPredicate_TComparison_EOperation_value = map[string]int32{
		"COMPARISON_OPERATION_UNSPECIFIED": 0,
		"L":                                1,
		"LE":                               2,
		"EQ":                               3,
		"NE":                               4,
		"GE":                               5,
		"G":                                6,
		"IND":                              7,
		"ID":                               8,
	}
)

func (x TPredicate_TComparison_EOperation) Enum() *TPredicate_TComparison_EOperation {
	p := new(TPredicate_TComparison_EOperation)
	*p = x
	return p
}

func (x TPredicate_TComparison_EOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TPredicate_TComparison_EOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[5].Descriptor()
}

func (TPredicate_TComparison_EOperation) Type() protoreflect.EnumType {
	return &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes[5]
}

func (x TPredicate_TComparison_EOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TPredicate_TComparison_EOperation.Descriptor instead.
func (TPredicate_TComparison_EOperation) EnumDescriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14, 10, 0}
}

// TListTablesRequest requests the list of tables in a particular database of the data source
//
// Deprecated: Marked as deprecated in ydb/library/yql/providers/generic/connector/api/service/protos/connector.proto.
type TListTablesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Data source instance to connect
	DataSourceInstance *common.TGenericDataSourceInstance `protobuf:"bytes,1,opt,name=data_source_instance,json=dataSourceInstance,proto3" json:"data_source_instance,omitempty"`
	// There may be a huge number of tables in the data source,
	// and here are the ways to extract only necessary ones:
	//
	// Types that are valid to be assigned to Filtering:
	//
	//	*TListTablesRequest_Pattern
	Filtering     isTListTablesRequest_Filtering `protobuf_oneof:"filtering"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TListTablesRequest) Reset() {
	*x = TListTablesRequest{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TListTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListTablesRequest) ProtoMessage() {}

func (x *TListTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListTablesRequest.ProtoReflect.Descriptor instead.
func (*TListTablesRequest) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{0}
}

func (x *TListTablesRequest) GetDataSourceInstance() *common.TGenericDataSourceInstance {
	if x != nil {
		return x.DataSourceInstance
	}
	return nil
}

func (x *TListTablesRequest) GetFiltering() isTListTablesRequest_Filtering {
	if x != nil {
		return x.Filtering
	}
	return nil
}

func (x *TListTablesRequest) GetPattern() string {
	if x != nil {
		if x, ok := x.Filtering.(*TListTablesRequest_Pattern); ok {
			return x.Pattern
		}
	}
	return ""
}

type isTListTablesRequest_Filtering interface {
	isTListTablesRequest_Filtering()
}

type TListTablesRequest_Pattern struct {
	// Regexp to filter table names
	Pattern string `protobuf:"bytes,2,opt,name=pattern,proto3,oneof"`
}

func (*TListTablesRequest_Pattern) isTListTablesRequest_Filtering() {}

// TListTablesResponse returns the list of tables in a particular database of the data source
//
// Deprecated: Marked as deprecated in ydb/library/yql/providers/generic/connector/api/service/protos/connector.proto.
type TListTablesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table names list
	Tables []string `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	// Call result
	Error         *TError `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TListTablesResponse) Reset() {
	*x = TListTablesResponse{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TListTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListTablesResponse) ProtoMessage() {}

func (x *TListTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListTablesResponse.ProtoReflect.Descriptor instead.
func (*TListTablesResponse) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{1}
}

func (x *TListTablesResponse) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *TListTablesResponse) GetError() *TError {
	if x != nil {
		return x.Error
	}
	return nil
}

// TDescribeTableRequest requests table metadata
type TDescribeTableRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Data source instance to connect
	DataSourceInstance *common.TGenericDataSourceInstance `protobuf:"bytes,1,opt,name=data_source_instance,json=dataSourceInstance,proto3" json:"data_source_instance,omitempty"`
	// Table name to describe.
	// Should be equivalent to the name in TFrom filled in TListSplitsRequest and TReadSplitsRequest.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// Rules for type mapping
	TypeMappingSettings *TTypeMappingSettings `protobuf:"bytes,3,opt,name=type_mapping_settings,json=typeMappingSettings,proto3" json:"type_mapping_settings,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TDescribeTableRequest) Reset() {
	*x = TDescribeTableRequest{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TDescribeTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeTableRequest) ProtoMessage() {}

func (x *TDescribeTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeTableRequest.ProtoReflect.Descriptor instead.
func (*TDescribeTableRequest) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{2}
}

func (x *TDescribeTableRequest) GetDataSourceInstance() *common.TGenericDataSourceInstance {
	if x != nil {
		return x.DataSourceInstance
	}
	return nil
}

func (x *TDescribeTableRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *TDescribeTableRequest) GetTypeMappingSettings() *TTypeMappingSettings {
	if x != nil {
		return x.TypeMappingSettings
	}
	return nil
}

type TTypeMappingSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Determines the format of date or time representation
	DateTimeFormat EDateTimeFormat `protobuf:"varint,1,opt,name=date_time_format,json=dateTimeFormat,proto3,enum=NYql.NConnector.NApi.EDateTimeFormat" json:"date_time_format,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TTypeMappingSettings) Reset() {
	*x = TTypeMappingSettings{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TTypeMappingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTypeMappingSettings) ProtoMessage() {}

func (x *TTypeMappingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTypeMappingSettings.ProtoReflect.Descriptor instead.
func (*TTypeMappingSettings) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{3}
}

func (x *TTypeMappingSettings) GetDateTimeFormat() EDateTimeFormat {
	if x != nil {
		return x.DateTimeFormat
	}
	return EDateTimeFormat_DATE_TIME_FORMAT_UNSPECIFIED
}

// TDescribeTableResponse returns table metadata
type TDescribeTableResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The whole schema of a table
	Schema *TSchema `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	// Call result
	Error         *TError `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TDescribeTableResponse) Reset() {
	*x = TDescribeTableResponse{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TDescribeTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeTableResponse) ProtoMessage() {}

func (x *TDescribeTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeTableResponse.ProtoReflect.Descriptor instead.
func (*TDescribeTableResponse) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{4}
}

func (x *TDescribeTableResponse) GetSchema() *TSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *TDescribeTableResponse) GetError() *TError {
	if x != nil {
		return x.Error
	}
	return nil
}

// TSchema represents the schema of the table
type TSchema struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Columns with YQL types
	Columns       []*Ydb.Column `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"` // TODO: optional metadata?
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TSchema) Reset() {
	*x = TSchema{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSchema) ProtoMessage() {}

func (x *TSchema) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSchema.ProtoReflect.Descriptor instead.
func (*TSchema) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{5}
}

func (x *TSchema) GetColumns() []*Ydb.Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

// TListSplitRequest asks Connector to split the requested data into elementary parts.
type TListSplitsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// YQ engine may want to read data from different tables simultaneously.
	// Perhaps Connector will provide consistency guarantees across the tables some day.
	Selects []*TSelect `protobuf:"bytes,2,rep,name=selects,proto3" json:"selects,omitempty"`
	// Defines the number of splits (and, as a consequence, affects the size of the split).
	// If you don't want splitting, set 1.
	MaxSplitCount uint32 `protobuf:"varint,3,opt,name=max_split_count,json=maxSplitCount,proto3" json:"max_split_count,omitempty"`
	// Connector will try to divide the data into the splits of this size,
	// but the exact match is not guaranteed.
	// Also this setting can be overridden by max_split_count.
	SplitSize uint64 `protobuf:"varint,4,opt,name=split_size,json=splitSize,proto3" json:"split_size,omitempty"`
	// Sometimes YQ doesn't know the exact size of the data set,
	// so it asks Connector to split the data into the splits of $split_size,
	// and the $max_split_count = MaxUINT32.
	// But if the data is too large, and too many splits will be generated,
	// this may exceed the memory available for YQ.
	// In such case, it's better to fail fast. This limit helps to implement it:
	SplitNumberLimit uint64 `protobuf:"varint,5,opt,name=split_number_limit,json=splitNumberLimit,proto3" json:"split_number_limit,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TListSplitsRequest) Reset() {
	*x = TListSplitsRequest{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TListSplitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListSplitsRequest) ProtoMessage() {}

func (x *TListSplitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListSplitsRequest.ProtoReflect.Descriptor instead.
func (*TListSplitsRequest) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{6}
}

func (x *TListSplitsRequest) GetSelects() []*TSelect {
	if x != nil {
		return x.Selects
	}
	return nil
}

func (x *TListSplitsRequest) GetMaxSplitCount() uint32 {
	if x != nil {
		return x.MaxSplitCount
	}
	return 0
}

func (x *TListSplitsRequest) GetSplitSize() uint64 {
	if x != nil {
		return x.SplitSize
	}
	return 0
}

func (x *TListSplitsRequest) GetSplitNumberLimit() uint64 {
	if x != nil {
		return x.SplitNumberLimit
	}
	return 0
}

// TListSplitResponse returns the list of splits for a particular set of table partitions
type TListSplitsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the list of splits for concurrent reading
	Splits []*TSplit `protobuf:"bytes,1,rep,name=splits,proto3" json:"splits,omitempty"`
	// Call result
	Error         *TError `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TListSplitsResponse) Reset() {
	*x = TListSplitsResponse{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TListSplitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListSplitsResponse) ProtoMessage() {}

func (x *TListSplitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListSplitsResponse.ProtoReflect.Descriptor instead.
func (*TListSplitsResponse) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{7}
}

func (x *TListSplitsResponse) GetSplits() []*TSplit {
	if x != nil {
		return x.Splits
	}
	return nil
}

func (x *TListSplitsResponse) GetError() *TError {
	if x != nil {
		return x.Error
	}
	return nil
}

// Select describes what to read from the data source.
//
// In RDBMS systems this call internally transforms into SQL expression using this template:
// SELECT $what
// FROM $from
// WHERE $filter
// LIMIT $limit [OFFSET $offset]
// TODO: support JOIN, ORDER BY, GROUP BY
type TSelect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Data source instance to connect
	DataSourceInstance *common.TGenericDataSourceInstance `protobuf:"bytes,1,opt,name=data_source_instance,json=dataSourceInstance,proto3" json:"data_source_instance,omitempty"`
	// Transforms into SELECT $what.
	What *TSelect_TWhat `protobuf:"bytes,2,opt,name=what,proto3" json:"what,omitempty"`
	// Transforms into FROM $from
	From *TSelect_TFrom `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// Transforms into WHERE $filter.
	// Optional field.
	Where *TSelect_TWhere `protobuf:"bytes,4,opt,name=where,proto3" json:"where,omitempty"`
	// Transforms into LIMIT $limit [OFFSET $offset].
	// Optional field.
	Limit *TSelect_TLimit `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// For schemaless data sources, when it's hard for us to infer schema for the query result,
	// user can supply the schema himself.
	// This field was used for some outdated experiments with S3 connector. Never try to fill them.
	//
	// Deprecated: Marked as deprecated in ydb/library/yql/providers/generic/connector/api/service/protos/connector.proto.
	PredefinedSchema *TSchema `protobuf:"bytes,6,opt,name=predefined_schema,json=predefinedSchema,proto3" json:"predefined_schema,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TSelect) Reset() {
	*x = TSelect{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSelect) ProtoMessage() {}

func (x *TSelect) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSelect.ProtoReflect.Descriptor instead.
func (*TSelect) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{8}
}

func (x *TSelect) GetDataSourceInstance() *common.TGenericDataSourceInstance {
	if x != nil {
		return x.DataSourceInstance
	}
	return nil
}

func (x *TSelect) GetWhat() *TSelect_TWhat {
	if x != nil {
		return x.What
	}
	return nil
}

func (x *TSelect) GetFrom() *TSelect_TFrom {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TSelect) GetWhere() *TSelect_TWhere {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *TSelect) GetLimit() *TSelect_TLimit {
	if x != nil {
		return x.Limit
	}
	return nil
}

// Deprecated: Marked as deprecated in ydb/library/yql/providers/generic/connector/api/service/protos/connector.proto.
func (x *TSelect) GetPredefinedSchema() *TSchema {
	if x != nil {
		return x.PredefinedSchema
	}
	return nil
}

// Split is a certain part of a table. In general, it should be much smaller than a partition.
// It also represents a unit of a parallel work for YQ engine.
type TSplit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Every split contains the description of SELECT it was generated for.
	Select *TSelect `protobuf:"bytes,1,opt,name=select,proto3" json:"select,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*TSplit_Description
	Payload isTSplit_Payload `protobuf_oneof:"payload"`
	// The ordered number in the split sequence generated in response to the `ListSplits` call
	Id            uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TSplit) Reset() {
	*x = TSplit{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSplit) ProtoMessage() {}

func (x *TSplit) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSplit.ProtoReflect.Descriptor instead.
func (*TSplit) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{9}
}

func (x *TSplit) GetSelect() *TSelect {
	if x != nil {
		return x.Select
	}
	return nil
}

func (x *TSplit) GetPayload() isTSplit_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TSplit) GetDescription() []byte {
	if x != nil {
		if x, ok := x.Payload.(*TSplit_Description); ok {
			return x.Description
		}
	}
	return nil
}

func (x *TSplit) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type isTSplit_Payload interface {
	isTSplit_Payload()
}

type TSplit_Description struct {
	// Different data sources may use different ways to describe a split,
	// and we don't want YQ to dig into its internals (at least now),
	// so we make the description opaque for YQ.
	Description []byte `protobuf:"bytes,2,opt,name=description,proto3,oneof"`
}

func (*TSplit_Description) isTSplit_Payload() {}

// ReadDataRequest reads the data associated with a particular table split.
type TReadSplitsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Data source instance to connect.
	// Deprecated field: server implementations must rely on
	// TDataSourceInstance provided in each TSelect.
	//
	// Deprecated: Marked as deprecated in ydb/library/yql/providers/generic/connector/api/service/protos/connector.proto.
	DataSourceInstance *common.TGenericDataSourceInstance `protobuf:"bytes,1,opt,name=data_source_instance,json=dataSourceInstance,proto3" json:"data_source_instance,omitempty"`
	// Splits that YQ engine would like to read.
	Splits []*TSplit `protobuf:"bytes,2,rep,name=splits,proto3" json:"splits,omitempty"`
	// Determines the mode of data extraction
	Mode TReadSplitsRequest_EMode `protobuf:"varint,3,opt,name=mode,proto3,enum=NYql.NConnector.NApi.TReadSplitsRequest_EMode" json:"mode,omitempty"`
	// Determines the format of data representation
	Format TReadSplitsRequest_EFormat `protobuf:"varint,4,opt,name=format,proto3,enum=NYql.NConnector.NApi.TReadSplitsRequest_EFormat" json:"format,omitempty"`
	// Specifies the location of split from where to start reading.
	// If stream has been recently interrupted, YQ may retry reading the split from the interrupted block
	// instead of reading the split from scratch.
	// If empty, the connector will return the split data from the very beginning.
	Continuation *TContinuation `protobuf:"bytes,6,opt,name=continuation,proto3" json:"continuation,omitempty"`
	// Determines various modes of server behavior in the context of predicate pushdown.
	// If not set, the default value is `FILTERING_OPTIONAL`.
	Filtering     TReadSplitsRequest_EFiltering `protobuf:"varint,7,opt,name=filtering,proto3,enum=NYql.NConnector.NApi.TReadSplitsRequest_EFiltering" json:"filtering,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TReadSplitsRequest) Reset() {
	*x = TReadSplitsRequest{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TReadSplitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadSplitsRequest) ProtoMessage() {}

func (x *TReadSplitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadSplitsRequest.ProtoReflect.Descriptor instead.
func (*TReadSplitsRequest) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in ydb/library/yql/providers/generic/connector/api/service/protos/connector.proto.
func (x *TReadSplitsRequest) GetDataSourceInstance() *common.TGenericDataSourceInstance {
	if x != nil {
		return x.DataSourceInstance
	}
	return nil
}

func (x *TReadSplitsRequest) GetSplits() []*TSplit {
	if x != nil {
		return x.Splits
	}
	return nil
}

func (x *TReadSplitsRequest) GetMode() TReadSplitsRequest_EMode {
	if x != nil {
		return x.Mode
	}
	return TReadSplitsRequest_MODE_UNSPECIFIED
}

func (x *TReadSplitsRequest) GetFormat() TReadSplitsRequest_EFormat {
	if x != nil {
		return x.Format
	}
	return TReadSplitsRequest_FORMAT_UNSPECIFIED
}

func (x *TReadSplitsRequest) GetContinuation() *TContinuation {
	if x != nil {
		return x.Continuation
	}
	return nil
}

func (x *TReadSplitsRequest) GetFiltering() TReadSplitsRequest_EFiltering {
	if x != nil {
		return x.Filtering
	}
	return TReadSplitsRequest_FILTERING_UNSPECIFIED
}

// ReadDataResponse returns the data corresponding to a particular split
type TReadSplitsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// There may be various formats to represent data
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*TReadSplitsResponse_ColumnSet
	//	*TReadSplitsResponse_ArrowIpcStreaming
	Payload isTReadSplitsResponse_Payload `protobuf_oneof:"payload"`
	// Since multiple splits can be read within one request, it's important to
	// match the received data with the requested split.
	SplitIndexNumber uint32 `protobuf:"varint,3,opt,name=split_index_number,json=splitIndexNumber,proto3" json:"split_index_number,omitempty"`
	// Specifies the location where the next block starts.
	// If stream has been interrupted, YQ may retry reading using the Continuation message
	// received for the last time.
	Continuation *TContinuation              `protobuf:"bytes,4,opt,name=continuation,proto3" json:"continuation,omitempty"`
	Stats        *TReadSplitsResponse_TStats `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
	// Call result
	Error         *TError `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TReadSplitsResponse) Reset() {
	*x = TReadSplitsResponse{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TReadSplitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadSplitsResponse) ProtoMessage() {}

func (x *TReadSplitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadSplitsResponse.ProtoReflect.Descriptor instead.
func (*TReadSplitsResponse) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{11}
}

func (x *TReadSplitsResponse) GetPayload() isTReadSplitsResponse_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TReadSplitsResponse) GetColumnSet() *TReadSplitsResponse_TColumnSet {
	if x != nil {
		if x, ok := x.Payload.(*TReadSplitsResponse_ColumnSet); ok {
			return x.ColumnSet
		}
	}
	return nil
}

func (x *TReadSplitsResponse) GetArrowIpcStreaming() []byte {
	if x != nil {
		if x, ok := x.Payload.(*TReadSplitsResponse_ArrowIpcStreaming); ok {
			return x.ArrowIpcStreaming
		}
	}
	return nil
}

func (x *TReadSplitsResponse) GetSplitIndexNumber() uint32 {
	if x != nil {
		return x.SplitIndexNumber
	}
	return 0
}

func (x *TReadSplitsResponse) GetContinuation() *TContinuation {
	if x != nil {
		return x.Continuation
	}
	return nil
}

func (x *TReadSplitsResponse) GetStats() *TReadSplitsResponse_TStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *TReadSplitsResponse) GetError() *TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type isTReadSplitsResponse_Payload interface {
	isTReadSplitsResponse_Payload()
}

type TReadSplitsResponse_ColumnSet struct {
	// Columnar data in protobuf format with YDB types.
	// Use it only for debugging, don't use in production.
	ColumnSet *TReadSplitsResponse_TColumnSet `protobuf:"bytes,1,opt,name=column_set,json=columnSet,proto3,oneof"`
}

type TReadSplitsResponse_ArrowIpcStreaming struct {
	// Data in Arrow IPC streaming format.
	ArrowIpcStreaming []byte `protobuf:"bytes,2,opt,name=arrow_ipc_streaming,json=arrowIpcStreaming,proto3,oneof"`
}

func (*TReadSplitsResponse_ColumnSet) isTReadSplitsResponse_Payload() {}

func (*TReadSplitsResponse_ArrowIpcStreaming) isTReadSplitsResponse_Payload() {}

// Continuation is a special type useful for the request retry.
// In case if split reading was interrupted,
// the engine does not have to read all the split data from the very beginning,
// it can specify the location from where it wants to reread the data instead.
type TContinuation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*TContinuation_Description
	Payload       isTContinuation_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TContinuation) Reset() {
	*x = TContinuation{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TContinuation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TContinuation) ProtoMessage() {}

func (x *TContinuation) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TContinuation.ProtoReflect.Descriptor instead.
func (*TContinuation) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{12}
}

func (x *TContinuation) GetPayload() isTContinuation_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TContinuation) GetDescription() []byte {
	if x != nil {
		if x, ok := x.Payload.(*TContinuation_Description); ok {
			return x.Description
		}
	}
	return nil
}

type isTContinuation_Payload interface {
	isTContinuation_Payload()
}

type TContinuation_Description struct {
	// In general description should be opaque to YQ.
	Description []byte `protobuf:"bytes,1,opt,name=description,proto3,oneof"`
}

func (*TContinuation_Description) isTContinuation_Payload() {}

// Expression with value (value can be expression of any type)
// Can be a column, a constant or a result of, for example,
// some arithmetical operation
type TExpression struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*TExpression_TypedValue
	//	*TExpression_Column
	//	*TExpression_ArithmeticalExpression
	//	*TExpression_Null
	//	*TExpression_Coalesce
	//	*TExpression_If
	//	*TExpression_Cast
	Payload       isTExpression_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TExpression) Reset() {
	*x = TExpression{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TExpression) ProtoMessage() {}

func (x *TExpression) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TExpression.ProtoReflect.Descriptor instead.
func (*TExpression) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13}
}

func (x *TExpression) GetPayload() isTExpression_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TExpression) GetTypedValue() *Ydb.TypedValue {
	if x != nil {
		if x, ok := x.Payload.(*TExpression_TypedValue); ok {
			return x.TypedValue
		}
	}
	return nil
}

func (x *TExpression) GetColumn() string {
	if x != nil {
		if x, ok := x.Payload.(*TExpression_Column); ok {
			return x.Column
		}
	}
	return ""
}

func (x *TExpression) GetArithmeticalExpression() *TExpression_TArithmeticalExpression {
	if x != nil {
		if x, ok := x.Payload.(*TExpression_ArithmeticalExpression); ok {
			return x.ArithmeticalExpression
		}
	}
	return nil
}

func (x *TExpression) GetNull() *TExpression_TNull {
	if x != nil {
		if x, ok := x.Payload.(*TExpression_Null); ok {
			return x.Null
		}
	}
	return nil
}

func (x *TExpression) GetCoalesce() *TExpression_TCoalesce {
	if x != nil {
		if x, ok := x.Payload.(*TExpression_Coalesce); ok {
			return x.Coalesce
		}
	}
	return nil
}

func (x *TExpression) GetIf() *TExpression_TIf {
	if x != nil {
		if x, ok := x.Payload.(*TExpression_If); ok {
			return x.If
		}
	}
	return nil
}

func (x *TExpression) GetCast() *TExpression_TCast {
	if x != nil {
		if x, ok := x.Payload.(*TExpression_Cast); ok {
			return x.Cast
		}
	}
	return nil
}

type isTExpression_Payload interface {
	isTExpression_Payload()
}

type TExpression_TypedValue struct {
	// A scalar value
	TypedValue *Ydb.TypedValue `protobuf:"bytes,1,opt,name=typed_value,json=typedValue,proto3,oneof"`
}

type TExpression_Column struct {
	// A name of another column to compare with
	Column string `protobuf:"bytes,2,opt,name=column,proto3,oneof"`
}

type TExpression_ArithmeticalExpression struct {
	ArithmeticalExpression *TExpression_TArithmeticalExpression `protobuf:"bytes,3,opt,name=arithmetical_expression,json=arithmeticalExpression,proto3,oneof"`
}

type TExpression_Null struct {
	Null *TExpression_TNull `protobuf:"bytes,4,opt,name=null,proto3,oneof"`
}

type TExpression_Coalesce struct {
	Coalesce *TExpression_TCoalesce `protobuf:"bytes,5,opt,name=coalesce,proto3,oneof"`
}

type TExpression_If struct {
	If *TExpression_TIf `protobuf:"bytes,6,opt,name=if,proto3,oneof"`
}

type TExpression_Cast struct {
	Cast *TExpression_TCast `protobuf:"bytes,7,opt,name=cast,proto3,oneof"`
}

func (*TExpression_TypedValue) isTExpression_Payload() {}

func (*TExpression_Column) isTExpression_Payload() {}

func (*TExpression_ArithmeticalExpression) isTExpression_Payload() {}

func (*TExpression_Null) isTExpression_Payload() {}

func (*TExpression_Coalesce) isTExpression_Payload() {}

func (*TExpression_If) isTExpression_Payload() {}

func (*TExpression_Cast) isTExpression_Payload() {}

// Predicate (use this types only for bool expressions)
type TPredicate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*TPredicate_Negation
	//	*TPredicate_Conjunction
	//	*TPredicate_Disjunction
	//	*TPredicate_Between
	//	*TPredicate_In
	//	*TPredicate_IsNull
	//	*TPredicate_IsNotNull
	//	*TPredicate_Comparison
	//	*TPredicate_BoolExpression
	//	*TPredicate_Coalesce
	//	*TPredicate_If
	//	*TPredicate_Regexp
	Payload       isTPredicate_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TPredicate) Reset() {
	*x = TPredicate{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPredicate) ProtoMessage() {}

func (x *TPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPredicate.ProtoReflect.Descriptor instead.
func (*TPredicate) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14}
}

func (x *TPredicate) GetPayload() isTPredicate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TPredicate) GetNegation() *TPredicate_TNegation {
	if x != nil {
		if x, ok := x.Payload.(*TPredicate_Negation); ok {
			return x.Negation
		}
	}
	return nil
}

func (x *TPredicate) GetConjunction() *TPredicate_TConjunction {
	if x != nil {
		if x, ok := x.Payload.(*TPredicate_Conjunction); ok {
			return x.Conjunction
		}
	}
	return nil
}

func (x *TPredicate) GetDisjunction() *TPredicate_TDisjunction {
	if x != nil {
		if x, ok := x.Payload.(*TPredicate_Disjunction); ok {
			return x.Disjunction
		}
	}
	return nil
}

func (x *TPredicate) GetBetween() *TPredicate_TBetween {
	if x != nil {
		if x, ok := x.Payload.(*TPredicate_Between); ok {
			return x.Between
		}
	}
	return nil
}

func (x *TPredicate) GetIn() *TPredicate_TIn {
	if x != nil {
		if x, ok := x.Payload.(*TPredicate_In); ok {
			return x.In
		}
	}
	return nil
}

func (x *TPredicate) GetIsNull() *TPredicate_TIsNull {
	if x != nil {
		if x, ok := x.Payload.(*TPredicate_IsNull); ok {
			return x.IsNull
		}
	}
	return nil
}

func (x *TPredicate) GetIsNotNull() *TPredicate_TIsNotNull {
	if x != nil {
		if x, ok := x.Payload.(*TPredicate_IsNotNull); ok {
			return x.IsNotNull
		}
	}
	return nil
}

func (x *TPredicate) GetComparison() *TPredicate_TComparison {
	if x != nil {
		if x, ok := x.Payload.(*TPredicate_Comparison); ok {
			return x.Comparison
		}
	}
	return nil
}

func (x *TPredicate) GetBoolExpression() *TPredicate_TBoolExpression {
	if x != nil {
		if x, ok := x.Payload.(*TPredicate_BoolExpression); ok {
			return x.BoolExpression
		}
	}
	return nil
}

func (x *TPredicate) GetCoalesce() *TPredicate_TCoalesce {
	if x != nil {
		if x, ok := x.Payload.(*TPredicate_Coalesce); ok {
			return x.Coalesce
		}
	}
	return nil
}

func (x *TPredicate) GetIf() *TPredicate_TIf {
	if x != nil {
		if x, ok := x.Payload.(*TPredicate_If); ok {
			return x.If
		}
	}
	return nil
}

func (x *TPredicate) GetRegexp() *TPredicate_TRegexp {
	if x != nil {
		if x, ok := x.Payload.(*TPredicate_Regexp); ok {
			return x.Regexp
		}
	}
	return nil
}

type isTPredicate_Payload interface {
	isTPredicate_Payload()
}

type TPredicate_Negation struct {
	Negation *TPredicate_TNegation `protobuf:"bytes,1,opt,name=negation,proto3,oneof"`
}

type TPredicate_Conjunction struct {
	Conjunction *TPredicate_TConjunction `protobuf:"bytes,2,opt,name=conjunction,proto3,oneof"`
}

type TPredicate_Disjunction struct {
	Disjunction *TPredicate_TDisjunction `protobuf:"bytes,3,opt,name=disjunction,proto3,oneof"`
}

type TPredicate_Between struct {
	Between *TPredicate_TBetween `protobuf:"bytes,4,opt,name=between,proto3,oneof"`
}

type TPredicate_In struct {
	In *TPredicate_TIn `protobuf:"bytes,5,opt,name=in,proto3,oneof"`
}

type TPredicate_IsNull struct {
	IsNull *TPredicate_TIsNull `protobuf:"bytes,6,opt,name=is_null,json=isNull,proto3,oneof"`
}

type TPredicate_IsNotNull struct {
	IsNotNull *TPredicate_TIsNotNull `protobuf:"bytes,7,opt,name=is_not_null,json=isNotNull,proto3,oneof"`
}

type TPredicate_Comparison struct {
	Comparison *TPredicate_TComparison `protobuf:"bytes,8,opt,name=comparison,proto3,oneof"`
}

type TPredicate_BoolExpression struct {
	BoolExpression *TPredicate_TBoolExpression `protobuf:"bytes,9,opt,name=bool_expression,json=boolExpression,proto3,oneof"`
}

type TPredicate_Coalesce struct {
	Coalesce *TPredicate_TCoalesce `protobuf:"bytes,10,opt,name=coalesce,proto3,oneof"`
}

type TPredicate_If struct {
	If *TPredicate_TIf `protobuf:"bytes,11,opt,name=if,proto3,oneof"`
}

type TPredicate_Regexp struct {
	Regexp *TPredicate_TRegexp `protobuf:"bytes,12,opt,name=regexp,proto3,oneof"`
}

func (*TPredicate_Negation) isTPredicate_Payload() {}

func (*TPredicate_Conjunction) isTPredicate_Payload() {}

func (*TPredicate_Disjunction) isTPredicate_Payload() {}

func (*TPredicate_Between) isTPredicate_Payload() {}

func (*TPredicate_In) isTPredicate_Payload() {}

func (*TPredicate_IsNull) isTPredicate_Payload() {}

func (*TPredicate_IsNotNull) isTPredicate_Payload() {}

func (*TPredicate_Comparison) isTPredicate_Payload() {}

func (*TPredicate_BoolExpression) isTPredicate_Payload() {}

func (*TPredicate_Coalesce) isTPredicate_Payload() {}

func (*TPredicate_If) isTPredicate_Payload() {}

func (*TPredicate_Regexp) isTPredicate_Payload() {}

// Special type to describe the result of any operation
type TError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// High-level code
	Status Ydb.StatusIds_StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	// Error message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Detailed explanation of a problem;
	// must be empty if status == SUCCESS
	Issues        []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues,proto3" json:"issues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TError) Reset() {
	*x = TError{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TError) ProtoMessage() {}

func (x *TError) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TError.ProtoReflect.Descriptor instead.
func (*TError) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{15}
}

func (x *TError) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *TError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TError) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

// Describes what particularly to get from the data source
type TSelect_TWhat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// NOTE: this API intentionally makes it not possible to request 'SELECT *'.
	// YQ must provide all the column names explicitly.
	//
	// Еmpty list means that YQ wants to get empty tuples in the response.
	// On the connector's side this request will be transformed into something like
	// SELECT 1 FROM $table (...)
	Items         []*TSelect_TWhat_TItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TSelect_TWhat) Reset() {
	*x = TSelect_TWhat{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TSelect_TWhat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSelect_TWhat) ProtoMessage() {}

func (x *TSelect_TWhat) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSelect_TWhat.ProtoReflect.Descriptor instead.
func (*TSelect_TWhat) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{8, 0}
}

func (x *TSelect_TWhat) GetItems() []*TSelect_TWhat_TItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type TSelect_TFrom struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table name for RDBMs
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// Unique identifier of an object stored within S3
	ObjectKey     string `protobuf:"bytes,2,opt,name=object_key,json=objectKey,proto3" json:"object_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TSelect_TFrom) Reset() {
	*x = TSelect_TFrom{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TSelect_TFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSelect_TFrom) ProtoMessage() {}

func (x *TSelect_TFrom) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSelect_TFrom.ProtoReflect.Descriptor instead.
func (*TSelect_TFrom) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{8, 1}
}

func (x *TSelect_TFrom) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *TSelect_TFrom) GetObjectKey() string {
	if x != nil {
		return x.ObjectKey
	}
	return ""
}

type TSelect_TWhere struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Strongly typed tree of predicates
	FilterTyped   *TPredicate `protobuf:"bytes,1,opt,name=filter_typed,json=filterTyped,proto3" json:"filter_typed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TSelect_TWhere) Reset() {
	*x = TSelect_TWhere{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TSelect_TWhere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSelect_TWhere) ProtoMessage() {}

func (x *TSelect_TWhere) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSelect_TWhere.ProtoReflect.Descriptor instead.
func (*TSelect_TWhere) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{8, 2}
}

func (x *TSelect_TWhere) GetFilterTyped() *TPredicate {
	if x != nil {
		return x.FilterTyped
	}
	return nil
}

type TSelect_TLimit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         uint64                 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        uint64                 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TSelect_TLimit) Reset() {
	*x = TSelect_TLimit{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TSelect_TLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSelect_TLimit) ProtoMessage() {}

func (x *TSelect_TLimit) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSelect_TLimit.ProtoReflect.Descriptor instead.
func (*TSelect_TLimit) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{8, 3}
}

func (x *TSelect_TLimit) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TSelect_TLimit) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type TSelect_TWhat_TItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// YQ can read particular table columns or call aggregate functions, for example.
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*TSelect_TWhat_TItem_Column
	Payload       isTSelect_TWhat_TItem_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TSelect_TWhat_TItem) Reset() {
	*x = TSelect_TWhat_TItem{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TSelect_TWhat_TItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSelect_TWhat_TItem) ProtoMessage() {}

func (x *TSelect_TWhat_TItem) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSelect_TWhat_TItem.ProtoReflect.Descriptor instead.
func (*TSelect_TWhat_TItem) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{8, 0, 0}
}

func (x *TSelect_TWhat_TItem) GetPayload() isTSelect_TWhat_TItem_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TSelect_TWhat_TItem) GetColumn() *Ydb.Column {
	if x != nil {
		if x, ok := x.Payload.(*TSelect_TWhat_TItem_Column); ok {
			return x.Column
		}
	}
	return nil
}

type isTSelect_TWhat_TItem_Payload interface {
	isTSelect_TWhat_TItem_Payload()
}

type TSelect_TWhat_TItem_Column struct {
	// a column to read
	Column *Ydb.Column `protobuf:"bytes,1,opt,name=column,proto3,oneof"`
}

func (*TSelect_TWhat_TItem_Column) isTSelect_TWhat_TItem_Payload() {}

// Protobuf columnar representation of data.
// Use it only for debugging, don't use in production.
type TReadSplitsResponse_TColumnSet struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Meta          []*Ydb.Column                             `protobuf:"bytes,1,rep,name=meta,proto3" json:"meta,omitempty"`
	Data          []*TReadSplitsResponse_TColumnSet_TColumn `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TReadSplitsResponse_TColumnSet) Reset() {
	*x = TReadSplitsResponse_TColumnSet{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TReadSplitsResponse_TColumnSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadSplitsResponse_TColumnSet) ProtoMessage() {}

func (x *TReadSplitsResponse_TColumnSet) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadSplitsResponse_TColumnSet.ProtoReflect.Descriptor instead.
func (*TReadSplitsResponse_TColumnSet) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{11, 0}
}

func (x *TReadSplitsResponse_TColumnSet) GetMeta() []*Ydb.Column {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TReadSplitsResponse_TColumnSet) GetData() []*TReadSplitsResponse_TColumnSet_TColumn {
	if x != nil {
		return x.Data
	}
	return nil
}

// Contains information about the page (a particular block of data
// returned by the Connector within a ReadSplits stream).
type TReadSplitsResponse_TStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of rows read from the data source in order to make this page.
	Rows uint64 `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	// Number of bytes read from the data source in order to make this page.
	// (measured in terms of Go type system).
	Bytes         uint64 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TReadSplitsResponse_TStats) Reset() {
	*x = TReadSplitsResponse_TStats{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TReadSplitsResponse_TStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadSplitsResponse_TStats) ProtoMessage() {}

func (x *TReadSplitsResponse_TStats) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadSplitsResponse_TStats.ProtoReflect.Descriptor instead.
func (*TReadSplitsResponse_TStats) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{11, 1}
}

func (x *TReadSplitsResponse_TStats) GetRows() uint64 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *TReadSplitsResponse_TStats) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type TReadSplitsResponse_TColumnSet_TColumn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*Ydb.Value           `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TReadSplitsResponse_TColumnSet_TColumn) Reset() {
	*x = TReadSplitsResponse_TColumnSet_TColumn{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TReadSplitsResponse_TColumnSet_TColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadSplitsResponse_TColumnSet_TColumn) ProtoMessage() {}

func (x *TReadSplitsResponse_TColumnSet_TColumn) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadSplitsResponse_TColumnSet_TColumn.ProtoReflect.Descriptor instead.
func (*TReadSplitsResponse_TColumnSet_TColumn) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{11, 0, 0}
}

func (x *TReadSplitsResponse_TColumnSet_TColumn) GetData() []*Ydb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TExpression_TArithmeticalExpression struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Operation     TExpression_TArithmeticalExpression_EOperation `protobuf:"varint,1,opt,name=operation,proto3,enum=NYql.NConnector.NApi.TExpression_TArithmeticalExpression_EOperation" json:"operation,omitempty"`
	LeftValue     *TExpression                                   `protobuf:"bytes,2,opt,name=left_value,json=leftValue,proto3" json:"left_value,omitempty"`
	RightValue    *TExpression                                   `protobuf:"bytes,3,opt,name=right_value,json=rightValue,proto3" json:"right_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TExpression_TArithmeticalExpression) Reset() {
	*x = TExpression_TArithmeticalExpression{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TExpression_TArithmeticalExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TExpression_TArithmeticalExpression) ProtoMessage() {}

func (x *TExpression_TArithmeticalExpression) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TExpression_TArithmeticalExpression.ProtoReflect.Descriptor instead.
func (*TExpression_TArithmeticalExpression) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 0}
}

func (x *TExpression_TArithmeticalExpression) GetOperation() TExpression_TArithmeticalExpression_EOperation {
	if x != nil {
		return x.Operation
	}
	return TExpression_TArithmeticalExpression_EXPRESSION_OPERATION_UNSPECIFIED
}

func (x *TExpression_TArithmeticalExpression) GetLeftValue() *TExpression {
	if x != nil {
		return x.LeftValue
	}
	return nil
}

func (x *TExpression_TArithmeticalExpression) GetRightValue() *TExpression {
	if x != nil {
		return x.RightValue
	}
	return nil
}

// "COALESCE($expression_1, $expression_2, ..., $expression_n)"
type TExpression_TCoalesce struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operands      []*TExpression         `protobuf:"bytes,1,rep,name=operands,proto3" json:"operands,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TExpression_TCoalesce) Reset() {
	*x = TExpression_TCoalesce{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TExpression_TCoalesce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TExpression_TCoalesce) ProtoMessage() {}

func (x *TExpression_TCoalesce) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TExpression_TCoalesce.ProtoReflect.Descriptor instead.
func (*TExpression_TCoalesce) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 1}
}

func (x *TExpression_TCoalesce) GetOperands() []*TExpression {
	if x != nil {
		return x.Operands
	}
	return nil
}

// "IF($predicate, $then_expression, $else_expression)"
// Example predicate:
// WHERE IF($A IS NOT NULL, $A, $B) + $B = 0
type TExpression_TIf struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Predicate      *TPredicate            `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
	ThenExpression *TExpression           `protobuf:"bytes,2,opt,name=then_expression,json=thenExpression,proto3" json:"then_expression,omitempty"`
	ElseExpression *TExpression           `protobuf:"bytes,3,opt,name=else_expression,json=elseExpression,proto3" json:"else_expression,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TExpression_TIf) Reset() {
	*x = TExpression_TIf{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TExpression_TIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TExpression_TIf) ProtoMessage() {}

func (x *TExpression_TIf) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TExpression_TIf.ProtoReflect.Descriptor instead.
func (*TExpression_TIf) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 2}
}

func (x *TExpression_TIf) GetPredicate() *TPredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *TExpression_TIf) GetThenExpression() *TExpression {
	if x != nil {
		return x.ThenExpression
	}
	return nil
}

func (x *TExpression_TIf) GetElseExpression() *TExpression {
	if x != nil {
		return x.ElseExpression
	}
	return nil
}

// CAST($value AS $type)
type TExpression_TCast struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *TExpression           `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Type          *Ydb.Type              `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TExpression_TCast) Reset() {
	*x = TExpression_TCast{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TExpression_TCast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TExpression_TCast) ProtoMessage() {}

func (x *TExpression_TCast) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TExpression_TCast.ProtoReflect.Descriptor instead.
func (*TExpression_TCast) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 3}
}

func (x *TExpression_TCast) GetValue() *TExpression {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TExpression_TCast) GetType() *Ydb.Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type TExpression_TNull struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TExpression_TNull) Reset() {
	*x = TExpression_TNull{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TExpression_TNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TExpression_TNull) ProtoMessage() {}

func (x *TExpression_TNull) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TExpression_TNull.ProtoReflect.Descriptor instead.
func (*TExpression_TNull) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{13, 4}
}

// NOT
type TPredicate_TNegation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operand       *TPredicate            `protobuf:"bytes,1,opt,name=operand,proto3" json:"operand,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TPredicate_TNegation) Reset() {
	*x = TPredicate_TNegation{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPredicate_TNegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPredicate_TNegation) ProtoMessage() {}

func (x *TPredicate_TNegation) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPredicate_TNegation.ProtoReflect.Descriptor instead.
func (*TPredicate_TNegation) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14, 0}
}

func (x *TPredicate_TNegation) GetOperand() *TPredicate {
	if x != nil {
		return x.Operand
	}
	return nil
}

// AND
type TPredicate_TConjunction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operands      []*TPredicate          `protobuf:"bytes,1,rep,name=operands,proto3" json:"operands,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TPredicate_TConjunction) Reset() {
	*x = TPredicate_TConjunction{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPredicate_TConjunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPredicate_TConjunction) ProtoMessage() {}

func (x *TPredicate_TConjunction) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPredicate_TConjunction.ProtoReflect.Descriptor instead.
func (*TPredicate_TConjunction) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14, 1}
}

func (x *TPredicate_TConjunction) GetOperands() []*TPredicate {
	if x != nil {
		return x.Operands
	}
	return nil
}

// OR
type TPredicate_TDisjunction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operands      []*TPredicate          `protobuf:"bytes,1,rep,name=operands,proto3" json:"operands,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TPredicate_TDisjunction) Reset() {
	*x = TPredicate_TDisjunction{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPredicate_TDisjunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPredicate_TDisjunction) ProtoMessage() {}

func (x *TPredicate_TDisjunction) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPredicate_TDisjunction.ProtoReflect.Descriptor instead.
func (*TPredicate_TDisjunction) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14, 2}
}

func (x *TPredicate_TDisjunction) GetOperands() []*TPredicate {
	if x != nil {
		return x.Operands
	}
	return nil
}

// "COALESCE($predicate_1, $predicate_2, ..., $predicate_n)"
type TPredicate_TCoalesce struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operands      []*TPredicate          `protobuf:"bytes,1,rep,name=operands,proto3" json:"operands,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TPredicate_TCoalesce) Reset() {
	*x = TPredicate_TCoalesce{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPredicate_TCoalesce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPredicate_TCoalesce) ProtoMessage() {}

func (x *TPredicate_TCoalesce) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPredicate_TCoalesce.ProtoReflect.Descriptor instead.
func (*TPredicate_TCoalesce) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14, 3}
}

func (x *TPredicate_TCoalesce) GetOperands() []*TPredicate {
	if x != nil {
		return x.Operands
	}
	return nil
}

// "IF($predicate, $then_predicate, $else_predicate)"
// Example predicate:
// WHERE IF($A IS NOT NULL, $A + $B = 0, $B = 0)
type TPredicate_TIf struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Predicate     *TPredicate            `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
	ThenPredicate *TPredicate            `protobuf:"bytes,2,opt,name=then_predicate,json=thenPredicate,proto3" json:"then_predicate,omitempty"`
	ElsePredicate *TPredicate            `protobuf:"bytes,3,opt,name=else_predicate,json=elsePredicate,proto3" json:"else_predicate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TPredicate_TIf) Reset() {
	*x = TPredicate_TIf{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPredicate_TIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPredicate_TIf) ProtoMessage() {}

func (x *TPredicate_TIf) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPredicate_TIf.ProtoReflect.Descriptor instead.
func (*TPredicate_TIf) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14, 4}
}

func (x *TPredicate_TIf) GetPredicate() *TPredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *TPredicate_TIf) GetThenPredicate() *TPredicate {
	if x != nil {
		return x.ThenPredicate
	}
	return nil
}

func (x *TPredicate_TIf) GetElsePredicate() *TPredicate {
	if x != nil {
		return x.ElsePredicate
	}
	return nil
}

// "$column BETWEEN $least AND $greatest"
type TPredicate_TBetween struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *TExpression           `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Least         *TExpression           `protobuf:"bytes,2,opt,name=least,proto3" json:"least,omitempty"`
	Greatest      *TExpression           `protobuf:"bytes,3,opt,name=greatest,proto3" json:"greatest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TPredicate_TBetween) Reset() {
	*x = TPredicate_TBetween{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPredicate_TBetween) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPredicate_TBetween) ProtoMessage() {}

func (x *TPredicate_TBetween) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPredicate_TBetween.ProtoReflect.Descriptor instead.
func (*TPredicate_TBetween) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14, 5}
}

func (x *TPredicate_TBetween) GetValue() *TExpression {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TPredicate_TBetween) GetLeast() *TExpression {
	if x != nil {
		return x.Least
	}
	return nil
}

func (x *TPredicate_TBetween) GetGreatest() *TExpression {
	if x != nil {
		return x.Greatest
	}
	return nil
}

// "$column IN $(set)"
type TPredicate_TIn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *TExpression           `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Set           []*TExpression         `protobuf:"bytes,2,rep,name=set,proto3" json:"set,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TPredicate_TIn) Reset() {
	*x = TPredicate_TIn{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPredicate_TIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPredicate_TIn) ProtoMessage() {}

func (x *TPredicate_TIn) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPredicate_TIn.ProtoReflect.Descriptor instead.
func (*TPredicate_TIn) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14, 6}
}

func (x *TPredicate_TIn) GetValue() *TExpression {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TPredicate_TIn) GetSet() []*TExpression {
	if x != nil {
		return x.Set
	}
	return nil
}

// "$column IS NULL"
type TPredicate_TIsNull struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *TExpression           `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TPredicate_TIsNull) Reset() {
	*x = TPredicate_TIsNull{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPredicate_TIsNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPredicate_TIsNull) ProtoMessage() {}

func (x *TPredicate_TIsNull) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPredicate_TIsNull.ProtoReflect.Descriptor instead.
func (*TPredicate_TIsNull) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14, 7}
}

func (x *TPredicate_TIsNull) GetValue() *TExpression {
	if x != nil {
		return x.Value
	}
	return nil
}

// "$column IS NOT NULL"
// TODO: maybe it is better to express with TNegation here
type TPredicate_TIsNotNull struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *TExpression           `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TPredicate_TIsNotNull) Reset() {
	*x = TPredicate_TIsNotNull{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPredicate_TIsNotNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPredicate_TIsNotNull) ProtoMessage() {}

func (x *TPredicate_TIsNotNull) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPredicate_TIsNotNull.ProtoReflect.Descriptor instead.
func (*TPredicate_TIsNotNull) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14, 8}
}

func (x *TPredicate_TIsNotNull) GetValue() *TExpression {
	if x != nil {
		return x.Value
	}
	return nil
}

// Expression wich has bool type
// For example, bool column
type TPredicate_TBoolExpression struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *TExpression           `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TPredicate_TBoolExpression) Reset() {
	*x = TPredicate_TBoolExpression{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPredicate_TBoolExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPredicate_TBoolExpression) ProtoMessage() {}

func (x *TPredicate_TBoolExpression) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPredicate_TBoolExpression.ProtoReflect.Descriptor instead.
func (*TPredicate_TBoolExpression) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14, 9}
}

func (x *TPredicate_TBoolExpression) GetValue() *TExpression {
	if x != nil {
		return x.Value
	}
	return nil
}

// A subset of comparators corresponding to the binary logical operators
type TPredicate_TComparison struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Operation     TPredicate_TComparison_EOperation `protobuf:"varint,1,opt,name=operation,proto3,enum=NYql.NConnector.NApi.TPredicate_TComparison_EOperation" json:"operation,omitempty"`
	LeftValue     *TExpression                      `protobuf:"bytes,2,opt,name=left_value,json=leftValue,proto3" json:"left_value,omitempty"`
	RightValue    *TExpression                      `protobuf:"bytes,3,opt,name=right_value,json=rightValue,proto3" json:"right_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TPredicate_TComparison) Reset() {
	*x = TPredicate_TComparison{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPredicate_TComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPredicate_TComparison) ProtoMessage() {}

func (x *TPredicate_TComparison) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPredicate_TComparison.ProtoReflect.Descriptor instead.
func (*TPredicate_TComparison) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14, 10}
}

func (x *TPredicate_TComparison) GetOperation() TPredicate_TComparison_EOperation {
	if x != nil {
		return x.Operation
	}
	return TPredicate_TComparison_COMPARISON_OPERATION_UNSPECIFIED
}

func (x *TPredicate_TComparison) GetLeftValue() *TExpression {
	if x != nil {
		return x.LeftValue
	}
	return nil
}

func (x *TPredicate_TComparison) GetRightValue() *TExpression {
	if x != nil {
		return x.RightValue
	}
	return nil
}

// "$column REGEXP $pattern"
type TPredicate_TRegexp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *TExpression           `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Pattern       *TExpression           `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TPredicate_TRegexp) Reset() {
	*x = TPredicate_TRegexp{}
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPredicate_TRegexp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPredicate_TRegexp) ProtoMessage() {}

func (x *TPredicate_TRegexp) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPredicate_TRegexp.ProtoReflect.Descriptor instead.
func (*TPredicate_TRegexp) Descriptor() ([]byte, []int) {
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP(), []int{14, 11}
}

func (x *TPredicate_TRegexp) GetValue() *TExpression {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TPredicate_TRegexp) GetPattern() *TExpression {
	if x != nil {
		return x.Pattern
	}
	return nil
}

var File_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto protoreflect.FileDescriptor

var file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDesc = string([]byte{
	0x0a, 0x4e, 0x79, 0x64, 0x62, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 0x79, 0x71,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x1a, 0x25, 0x79, 0x64, 0x62, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64,
	0x62, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x79,
	0x64, 0x62, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x79, 0x64, 0x62,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x79, 0x71, 0x6c, 0x2f,
	0x65, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x12, 0x54, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52,
	0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e,
	0x59, 0x71, 0x6c, 0x2e, 0x54, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x12,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x3a, 0x02,
	0x18, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x22,
	0x65, 0x0a, 0x13, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x15, 0x54, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x52, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x54, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x59, 0x71, 0x6c,
	0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69,
	0x2e, 0x54, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x67, 0x0a, 0x14, 0x54, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x4e,
	0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e,
	0x41, 0x70, 0x69, 0x2e, 0x45, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x30, 0x0a, 0x07, 0x54, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x12,
	0x54, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x7f, 0x0a, 0x13, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x06, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe8, 0x05, 0x0a, 0x07, 0x54, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x12, 0x52, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x54, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x77, 0x68, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x57, 0x68, 0x61, 0x74, 0x52, 0x04, 0x77, 0x68, 0x61, 0x74,
	0x12, 0x37, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x05, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x57, 0x68, 0x65, 0x72, 0x65, 0x52, 0x05,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x2e, 0x54, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x4e, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e,
	0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x1a, 0x83, 0x01, 0x0a, 0x05, 0x54, 0x57, 0x68, 0x61, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4e, 0x59, 0x71,
	0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x57, 0x68, 0x61, 0x74, 0x2e,
	0x54, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x05,
	0x54, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x09, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x3c, 0x0a, 0x05, 0x54, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x53, 0x0a, 0x06, 0x54, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12,
	0x43, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x1a, 0x36, 0x0a, 0x06, 0x54, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x7e, 0x0a, 0x06, 0x54, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x06,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e,
	0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x06, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0xa9, 0x05, 0x0a, 0x12, 0x54, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x54,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x4e, 0x59,
	0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x59,
	0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x22, 0x39, 0x0a, 0x05, 0x45, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22, 0x40, 0x0a, 0x07,
	0x45, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x5f, 0x49, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x22, 0x58,
	0x0a, 0x0a, 0x45, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x15,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x4e,
	0x44, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xfd,
	0x04, 0x0a, 0x13, 0x54, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4e, 0x59, 0x71,
	0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x11, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x49, 0x70, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x47, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x54, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x32,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x1a, 0xaa, 0x01, 0x0a, 0x0a, 0x54, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65,
	0x74, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x29, 0x0a, 0x07, 0x54, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x32, 0x0a, 0x06, 0x54, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x3e,
	0x0a, 0x0d, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x82,
	0x0a, 0x0a, 0x0b, 0x54, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x74, 0x0a, 0x17,
	0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x61, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c,
	0x6c, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x43, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x02,
	0x69, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x49, 0x66, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x66, 0x12, 0x3d, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x43, 0x61, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x63, 0x61, 0x73, 0x74, 0x1a, 0x8b, 0x03, 0x0a, 0x17, 0x54, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x62, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x65, 0x66,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x59,
	0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0a, 0x45,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x58, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x55, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x42, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x49,
	0x56, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x44, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x49, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x54,
	0x5f, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x49, 0x54, 0x5f, 0x58, 0x4f, 0x52,
	0x10, 0x06, 0x1a, 0x4a, 0x0a, 0x09, 0x54, 0x43, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x12,
	0x3d, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0xdd,
	0x01, 0x0a, 0x03, 0x54, 0x49, 0x66, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x59, 0x71, 0x6c,
	0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69,
	0x2e, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x68, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0f, 0x65, 0x6c, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x59,
	0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x65, 0x6c, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x5f,
	0x0a, 0x05, 0x54, 0x43, 0x61, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a,
	0x07, 0x0a, 0x05, 0x54, 0x4e, 0x75, 0x6c, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x82, 0x13, 0x0a, 0x0a, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x48, 0x00,
	0x52, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x49, 0x6e, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x6e, 0x12, 0x43, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x49, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x06,
	0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x4d, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4e, 0x59,
	0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x49,
	0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x6f,
	0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4e, 0x59, 0x71, 0x6c,
	0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69,
	0x2e, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x43, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x02,
	0x69, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x49, 0x66, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x66, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x48, 0x00,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x1a, 0x47, 0x0a, 0x09, 0x54, 0x4e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x1a, 0x4c, 0x0a, 0x0c, 0x54, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x1a,
	0x4c, 0x0a, 0x0c, 0x54, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0x49, 0x0a,
	0x09, 0x54, 0x43, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e,
	0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0xd7, 0x01, 0x0a, 0x03, 0x54, 0x49, 0x66,
	0x12, 0x3e, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x47, 0x0a, 0x0e, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x74, 0x68, 0x65, 0x6e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x65, 0x6c, 0x73,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x6c, 0x73, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x1a, 0xbb, 0x01, 0x0a, 0x08, 0x54, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x12,
	0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x1a, 0x73, 0x0a, 0x03, 0x54, 0x49, 0x6e, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x33, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x73, 0x65, 0x74, 0x1a, 0x42, 0x0a, 0x07, 0x54, 0x49, 0x73, 0x4e, 0x75, 0x6c, 0x6c,
	0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x45, 0x0a, 0x0a, 0x54, 0x49, 0x73,
	0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x4a, 0x0a, 0x0f, 0x54, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xdd, 0x02, 0x0a,
	0x0b, 0x54, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x45, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x59, 0x71,
	0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x71, 0x0a, 0x0a, 0x45, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x05, 0x0a,
	0x01, 0x4c, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02,
	0x45, 0x51, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02,
	0x47, 0x45, 0x10, 0x05, 0x12, 0x05, 0x0a, 0x01, 0x47, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x4e, 0x44, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x08, 0x1a, 0x7f, 0x0a, 0x07,
	0x54, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3b, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x06, 0x54, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x2a, 0x56, 0x0a, 0x0f, 0x45, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x59, 0x51, 0x4c,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x02, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x66, 0x71, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescOnce sync.Once
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescData []byte
)

func file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescGZIP() []byte {
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescOnce.Do(func() {
		file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDesc), len(file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDesc)))
	})
	return file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDescData
}

var file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_goTypes = []any{
	(EDateTimeFormat)(0),                                // 0: NYql.NConnector.NApi.EDateTimeFormat
	(TReadSplitsRequest_EMode)(0),                       // 1: NYql.NConnector.NApi.TReadSplitsRequest.EMode
	(TReadSplitsRequest_EFormat)(0),                     // 2: NYql.NConnector.NApi.TReadSplitsRequest.EFormat
	(TReadSplitsRequest_EFiltering)(0),                  // 3: NYql.NConnector.NApi.TReadSplitsRequest.EFiltering
	(TExpression_TArithmeticalExpression_EOperation)(0), // 4: NYql.NConnector.NApi.TExpression.TArithmeticalExpression.EOperation
	(TPredicate_TComparison_EOperation)(0),              // 5: NYql.NConnector.NApi.TPredicate.TComparison.EOperation
	(*TListTablesRequest)(nil),                          // 6: NYql.NConnector.NApi.TListTablesRequest
	(*TListTablesResponse)(nil),                         // 7: NYql.NConnector.NApi.TListTablesResponse
	(*TDescribeTableRequest)(nil),                       // 8: NYql.NConnector.NApi.TDescribeTableRequest
	(*TTypeMappingSettings)(nil),                        // 9: NYql.NConnector.NApi.TTypeMappingSettings
	(*TDescribeTableResponse)(nil),                      // 10: NYql.NConnector.NApi.TDescribeTableResponse
	(*TSchema)(nil),                                     // 11: NYql.NConnector.NApi.TSchema
	(*TListSplitsRequest)(nil),                          // 12: NYql.NConnector.NApi.TListSplitsRequest
	(*TListSplitsResponse)(nil),                         // 13: NYql.NConnector.NApi.TListSplitsResponse
	(*TSelect)(nil),                                     // 14: NYql.NConnector.NApi.TSelect
	(*TSplit)(nil),                                      // 15: NYql.NConnector.NApi.TSplit
	(*TReadSplitsRequest)(nil),                          // 16: NYql.NConnector.NApi.TReadSplitsRequest
	(*TReadSplitsResponse)(nil),                         // 17: NYql.NConnector.NApi.TReadSplitsResponse
	(*TContinuation)(nil),                               // 18: NYql.NConnector.NApi.TContinuation
	(*TExpression)(nil),                                 // 19: NYql.NConnector.NApi.TExpression
	(*TPredicate)(nil),                                  // 20: NYql.NConnector.NApi.TPredicate
	(*TError)(nil),                                      // 21: NYql.NConnector.NApi.TError
	(*TSelect_TWhat)(nil),                               // 22: NYql.NConnector.NApi.TSelect.TWhat
	(*TSelect_TFrom)(nil),                               // 23: NYql.NConnector.NApi.TSelect.TFrom
	(*TSelect_TWhere)(nil),                              // 24: NYql.NConnector.NApi.TSelect.TWhere
	(*TSelect_TLimit)(nil),                              // 25: NYql.NConnector.NApi.TSelect.TLimit
	(*TSelect_TWhat_TItem)(nil),                         // 26: NYql.NConnector.NApi.TSelect.TWhat.TItem
	(*TReadSplitsResponse_TColumnSet)(nil),              // 27: NYql.NConnector.NApi.TReadSplitsResponse.TColumnSet
	(*TReadSplitsResponse_TStats)(nil),                  // 28: NYql.NConnector.NApi.TReadSplitsResponse.TStats
	(*TReadSplitsResponse_TColumnSet_TColumn)(nil),      // 29: NYql.NConnector.NApi.TReadSplitsResponse.TColumnSet.TColumn
	(*TExpression_TArithmeticalExpression)(nil),         // 30: NYql.NConnector.NApi.TExpression.TArithmeticalExpression
	(*TExpression_TCoalesce)(nil),                       // 31: NYql.NConnector.NApi.TExpression.TCoalesce
	(*TExpression_TIf)(nil),                             // 32: NYql.NConnector.NApi.TExpression.TIf
	(*TExpression_TCast)(nil),                           // 33: NYql.NConnector.NApi.TExpression.TCast
	(*TExpression_TNull)(nil),                           // 34: NYql.NConnector.NApi.TExpression.TNull
	(*TPredicate_TNegation)(nil),                        // 35: NYql.NConnector.NApi.TPredicate.TNegation
	(*TPredicate_TConjunction)(nil),                     // 36: NYql.NConnector.NApi.TPredicate.TConjunction
	(*TPredicate_TDisjunction)(nil),                     // 37: NYql.NConnector.NApi.TPredicate.TDisjunction
	(*TPredicate_TCoalesce)(nil),                        // 38: NYql.NConnector.NApi.TPredicate.TCoalesce
	(*TPredicate_TIf)(nil),                              // 39: NYql.NConnector.NApi.TPredicate.TIf
	(*TPredicate_TBetween)(nil),                         // 40: NYql.NConnector.NApi.TPredicate.TBetween
	(*TPredicate_TIn)(nil),                              // 41: NYql.NConnector.NApi.TPredicate.TIn
	(*TPredicate_TIsNull)(nil),                          // 42: NYql.NConnector.NApi.TPredicate.TIsNull
	(*TPredicate_TIsNotNull)(nil),                       // 43: NYql.NConnector.NApi.TPredicate.TIsNotNull
	(*TPredicate_TBoolExpression)(nil),                  // 44: NYql.NConnector.NApi.TPredicate.TBoolExpression
	(*TPredicate_TComparison)(nil),                      // 45: NYql.NConnector.NApi.TPredicate.TComparison
	(*TPredicate_TRegexp)(nil),                          // 46: NYql.NConnector.NApi.TPredicate.TRegexp
	(*common.TGenericDataSourceInstance)(nil),           // 47: NYql.TGenericDataSourceInstance
	(*Ydb.Column)(nil),                                  // 48: Ydb.Column
	(*Ydb.TypedValue)(nil),                              // 49: Ydb.TypedValue
	(Ydb.StatusIds_StatusCode)(0),                       // 50: Ydb.StatusIds.StatusCode
	(*Ydb_Issue.IssueMessage)(nil),                      // 51: Ydb.Issue.IssueMessage
	(*Ydb.Value)(nil),                                   // 52: Ydb.Value
	(*Ydb.Type)(nil),                                    // 53: Ydb.Type
}
var file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_depIdxs = []int32{
	47, // 0: NYql.NConnector.NApi.TListTablesRequest.data_source_instance:type_name -> NYql.TGenericDataSourceInstance
	21, // 1: NYql.NConnector.NApi.TListTablesResponse.error:type_name -> NYql.NConnector.NApi.TError
	47, // 2: NYql.NConnector.NApi.TDescribeTableRequest.data_source_instance:type_name -> NYql.TGenericDataSourceInstance
	9,  // 3: NYql.NConnector.NApi.TDescribeTableRequest.type_mapping_settings:type_name -> NYql.NConnector.NApi.TTypeMappingSettings
	0,  // 4: NYql.NConnector.NApi.TTypeMappingSettings.date_time_format:type_name -> NYql.NConnector.NApi.EDateTimeFormat
	11, // 5: NYql.NConnector.NApi.TDescribeTableResponse.schema:type_name -> NYql.NConnector.NApi.TSchema
	21, // 6: NYql.NConnector.NApi.TDescribeTableResponse.error:type_name -> NYql.NConnector.NApi.TError
	48, // 7: NYql.NConnector.NApi.TSchema.columns:type_name -> Ydb.Column
	14, // 8: NYql.NConnector.NApi.TListSplitsRequest.selects:type_name -> NYql.NConnector.NApi.TSelect
	15, // 9: NYql.NConnector.NApi.TListSplitsResponse.splits:type_name -> NYql.NConnector.NApi.TSplit
	21, // 10: NYql.NConnector.NApi.TListSplitsResponse.error:type_name -> NYql.NConnector.NApi.TError
	47, // 11: NYql.NConnector.NApi.TSelect.data_source_instance:type_name -> NYql.TGenericDataSourceInstance
	22, // 12: NYql.NConnector.NApi.TSelect.what:type_name -> NYql.NConnector.NApi.TSelect.TWhat
	23, // 13: NYql.NConnector.NApi.TSelect.from:type_name -> NYql.NConnector.NApi.TSelect.TFrom
	24, // 14: NYql.NConnector.NApi.TSelect.where:type_name -> NYql.NConnector.NApi.TSelect.TWhere
	25, // 15: NYql.NConnector.NApi.TSelect.limit:type_name -> NYql.NConnector.NApi.TSelect.TLimit
	11, // 16: NYql.NConnector.NApi.TSelect.predefined_schema:type_name -> NYql.NConnector.NApi.TSchema
	14, // 17: NYql.NConnector.NApi.TSplit.select:type_name -> NYql.NConnector.NApi.TSelect
	47, // 18: NYql.NConnector.NApi.TReadSplitsRequest.data_source_instance:type_name -> NYql.TGenericDataSourceInstance
	15, // 19: NYql.NConnector.NApi.TReadSplitsRequest.splits:type_name -> NYql.NConnector.NApi.TSplit
	1,  // 20: NYql.NConnector.NApi.TReadSplitsRequest.mode:type_name -> NYql.NConnector.NApi.TReadSplitsRequest.EMode
	2,  // 21: NYql.NConnector.NApi.TReadSplitsRequest.format:type_name -> NYql.NConnector.NApi.TReadSplitsRequest.EFormat
	18, // 22: NYql.NConnector.NApi.TReadSplitsRequest.continuation:type_name -> NYql.NConnector.NApi.TContinuation
	3,  // 23: NYql.NConnector.NApi.TReadSplitsRequest.filtering:type_name -> NYql.NConnector.NApi.TReadSplitsRequest.EFiltering
	27, // 24: NYql.NConnector.NApi.TReadSplitsResponse.column_set:type_name -> NYql.NConnector.NApi.TReadSplitsResponse.TColumnSet
	18, // 25: NYql.NConnector.NApi.TReadSplitsResponse.continuation:type_name -> NYql.NConnector.NApi.TContinuation
	28, // 26: NYql.NConnector.NApi.TReadSplitsResponse.stats:type_name -> NYql.NConnector.NApi.TReadSplitsResponse.TStats
	21, // 27: NYql.NConnector.NApi.TReadSplitsResponse.error:type_name -> NYql.NConnector.NApi.TError
	49, // 28: NYql.NConnector.NApi.TExpression.typed_value:type_name -> Ydb.TypedValue
	30, // 29: NYql.NConnector.NApi.TExpression.arithmetical_expression:type_name -> NYql.NConnector.NApi.TExpression.TArithmeticalExpression
	34, // 30: NYql.NConnector.NApi.TExpression.null:type_name -> NYql.NConnector.NApi.TExpression.TNull
	31, // 31: NYql.NConnector.NApi.TExpression.coalesce:type_name -> NYql.NConnector.NApi.TExpression.TCoalesce
	32, // 32: NYql.NConnector.NApi.TExpression.if:type_name -> NYql.NConnector.NApi.TExpression.TIf
	33, // 33: NYql.NConnector.NApi.TExpression.cast:type_name -> NYql.NConnector.NApi.TExpression.TCast
	35, // 34: NYql.NConnector.NApi.TPredicate.negation:type_name -> NYql.NConnector.NApi.TPredicate.TNegation
	36, // 35: NYql.NConnector.NApi.TPredicate.conjunction:type_name -> NYql.NConnector.NApi.TPredicate.TConjunction
	37, // 36: NYql.NConnector.NApi.TPredicate.disjunction:type_name -> NYql.NConnector.NApi.TPredicate.TDisjunction
	40, // 37: NYql.NConnector.NApi.TPredicate.between:type_name -> NYql.NConnector.NApi.TPredicate.TBetween
	41, // 38: NYql.NConnector.NApi.TPredicate.in:type_name -> NYql.NConnector.NApi.TPredicate.TIn
	42, // 39: NYql.NConnector.NApi.TPredicate.is_null:type_name -> NYql.NConnector.NApi.TPredicate.TIsNull
	43, // 40: NYql.NConnector.NApi.TPredicate.is_not_null:type_name -> NYql.NConnector.NApi.TPredicate.TIsNotNull
	45, // 41: NYql.NConnector.NApi.TPredicate.comparison:type_name -> NYql.NConnector.NApi.TPredicate.TComparison
	44, // 42: NYql.NConnector.NApi.TPredicate.bool_expression:type_name -> NYql.NConnector.NApi.TPredicate.TBoolExpression
	38, // 43: NYql.NConnector.NApi.TPredicate.coalesce:type_name -> NYql.NConnector.NApi.TPredicate.TCoalesce
	39, // 44: NYql.NConnector.NApi.TPredicate.if:type_name -> NYql.NConnector.NApi.TPredicate.TIf
	46, // 45: NYql.NConnector.NApi.TPredicate.regexp:type_name -> NYql.NConnector.NApi.TPredicate.TRegexp
	50, // 46: NYql.NConnector.NApi.TError.status:type_name -> Ydb.StatusIds.StatusCode
	51, // 47: NYql.NConnector.NApi.TError.issues:type_name -> Ydb.Issue.IssueMessage
	26, // 48: NYql.NConnector.NApi.TSelect.TWhat.items:type_name -> NYql.NConnector.NApi.TSelect.TWhat.TItem
	20, // 49: NYql.NConnector.NApi.TSelect.TWhere.filter_typed:type_name -> NYql.NConnector.NApi.TPredicate
	48, // 50: NYql.NConnector.NApi.TSelect.TWhat.TItem.column:type_name -> Ydb.Column
	48, // 51: NYql.NConnector.NApi.TReadSplitsResponse.TColumnSet.meta:type_name -> Ydb.Column
	29, // 52: NYql.NConnector.NApi.TReadSplitsResponse.TColumnSet.data:type_name -> NYql.NConnector.NApi.TReadSplitsResponse.TColumnSet.TColumn
	52, // 53: NYql.NConnector.NApi.TReadSplitsResponse.TColumnSet.TColumn.data:type_name -> Ydb.Value
	4,  // 54: NYql.NConnector.NApi.TExpression.TArithmeticalExpression.operation:type_name -> NYql.NConnector.NApi.TExpression.TArithmeticalExpression.EOperation
	19, // 55: NYql.NConnector.NApi.TExpression.TArithmeticalExpression.left_value:type_name -> NYql.NConnector.NApi.TExpression
	19, // 56: NYql.NConnector.NApi.TExpression.TArithmeticalExpression.right_value:type_name -> NYql.NConnector.NApi.TExpression
	19, // 57: NYql.NConnector.NApi.TExpression.TCoalesce.operands:type_name -> NYql.NConnector.NApi.TExpression
	20, // 58: NYql.NConnector.NApi.TExpression.TIf.predicate:type_name -> NYql.NConnector.NApi.TPredicate
	19, // 59: NYql.NConnector.NApi.TExpression.TIf.then_expression:type_name -> NYql.NConnector.NApi.TExpression
	19, // 60: NYql.NConnector.NApi.TExpression.TIf.else_expression:type_name -> NYql.NConnector.NApi.TExpression
	19, // 61: NYql.NConnector.NApi.TExpression.TCast.value:type_name -> NYql.NConnector.NApi.TExpression
	53, // 62: NYql.NConnector.NApi.TExpression.TCast.type:type_name -> Ydb.Type
	20, // 63: NYql.NConnector.NApi.TPredicate.TNegation.operand:type_name -> NYql.NConnector.NApi.TPredicate
	20, // 64: NYql.NConnector.NApi.TPredicate.TConjunction.operands:type_name -> NYql.NConnector.NApi.TPredicate
	20, // 65: NYql.NConnector.NApi.TPredicate.TDisjunction.operands:type_name -> NYql.NConnector.NApi.TPredicate
	20, // 66: NYql.NConnector.NApi.TPredicate.TCoalesce.operands:type_name -> NYql.NConnector.NApi.TPredicate
	20, // 67: NYql.NConnector.NApi.TPredicate.TIf.predicate:type_name -> NYql.NConnector.NApi.TPredicate
	20, // 68: NYql.NConnector.NApi.TPredicate.TIf.then_predicate:type_name -> NYql.NConnector.NApi.TPredicate
	20, // 69: NYql.NConnector.NApi.TPredicate.TIf.else_predicate:type_name -> NYql.NConnector.NApi.TPredicate
	19, // 70: NYql.NConnector.NApi.TPredicate.TBetween.value:type_name -> NYql.NConnector.NApi.TExpression
	19, // 71: NYql.NConnector.NApi.TPredicate.TBetween.least:type_name -> NYql.NConnector.NApi.TExpression
	19, // 72: NYql.NConnector.NApi.TPredicate.TBetween.greatest:type_name -> NYql.NConnector.NApi.TExpression
	19, // 73: NYql.NConnector.NApi.TPredicate.TIn.value:type_name -> NYql.NConnector.NApi.TExpression
	19, // 74: NYql.NConnector.NApi.TPredicate.TIn.set:type_name -> NYql.NConnector.NApi.TExpression
	19, // 75: NYql.NConnector.NApi.TPredicate.TIsNull.value:type_name -> NYql.NConnector.NApi.TExpression
	19, // 76: NYql.NConnector.NApi.TPredicate.TIsNotNull.value:type_name -> NYql.NConnector.NApi.TExpression
	19, // 77: NYql.NConnector.NApi.TPredicate.TBoolExpression.value:type_name -> NYql.NConnector.NApi.TExpression
	5,  // 78: NYql.NConnector.NApi.TPredicate.TComparison.operation:type_name -> NYql.NConnector.NApi.TPredicate.TComparison.EOperation
	19, // 79: NYql.NConnector.NApi.TPredicate.TComparison.left_value:type_name -> NYql.NConnector.NApi.TExpression
	19, // 80: NYql.NConnector.NApi.TPredicate.TComparison.right_value:type_name -> NYql.NConnector.NApi.TExpression
	19, // 81: NYql.NConnector.NApi.TPredicate.TRegexp.value:type_name -> NYql.NConnector.NApi.TExpression
	19, // 82: NYql.NConnector.NApi.TPredicate.TRegexp.pattern:type_name -> NYql.NConnector.NApi.TExpression
	83, // [83:83] is the sub-list for method output_type
	83, // [83:83] is the sub-list for method input_type
	83, // [83:83] is the sub-list for extension type_name
	83, // [83:83] is the sub-list for extension extendee
	0,  // [0:83] is the sub-list for field type_name
}

func init() {
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_init()
}
func file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_init() {
	if File_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto != nil {
		return
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[0].OneofWrappers = []any{
		(*TListTablesRequest_Pattern)(nil),
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[9].OneofWrappers = []any{
		(*TSplit_Description)(nil),
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[11].OneofWrappers = []any{
		(*TReadSplitsResponse_ColumnSet)(nil),
		(*TReadSplitsResponse_ArrowIpcStreaming)(nil),
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[12].OneofWrappers = []any{
		(*TContinuation_Description)(nil),
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[13].OneofWrappers = []any{
		(*TExpression_TypedValue)(nil),
		(*TExpression_Column)(nil),
		(*TExpression_ArithmeticalExpression)(nil),
		(*TExpression_Null)(nil),
		(*TExpression_Coalesce)(nil),
		(*TExpression_If)(nil),
		(*TExpression_Cast)(nil),
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[14].OneofWrappers = []any{
		(*TPredicate_Negation)(nil),
		(*TPredicate_Conjunction)(nil),
		(*TPredicate_Disjunction)(nil),
		(*TPredicate_Between)(nil),
		(*TPredicate_In)(nil),
		(*TPredicate_IsNull)(nil),
		(*TPredicate_IsNotNull)(nil),
		(*TPredicate_Comparison)(nil),
		(*TPredicate_BoolExpression)(nil),
		(*TPredicate_Coalesce)(nil),
		(*TPredicate_If)(nil),
		(*TPredicate_Regexp)(nil),
	}
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes[20].OneofWrappers = []any{
		(*TSelect_TWhat_TItem_Column)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDesc), len(file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_goTypes,
		DependencyIndexes: file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_depIdxs,
		EnumInfos:         file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_enumTypes,
		MessageInfos:      file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_msgTypes,
	}.Build()
	File_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto = out.File
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_goTypes = nil
	file_ydb_library_yql_providers_generic_connector_api_service_protos_connector_proto_depIdxs = nil
}
