// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: app/config/bench.proto

package config

import (
	common "github.com/ydb-platform/fq-connector-go/api/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TBenchmarkConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// We can either connect to remote Connector server
	// or run our own server within the same process.
	//
	// Types that are valid to be assigned to Server:
	//
	//	*TBenchmarkConfig_ServerRemote
	//	*TBenchmarkConfig_ServerLocal
	Server isTBenchmarkConfig_Server `protobuf_oneof:"server"`
	// A data source instance from which we'll read the data
	DataSourceInstance *common.TGenericDataSourceInstance `protobuf:"bytes,3,opt,name=data_source_instance,json=dataSourceInstance,proto3" json:"data_source_instance,omitempty"`
	// A table from which we'll read the data
	Table string `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
	// A list of test cases that will be executed during benchmark session
	TestCases []*TBenchmarkTestCase `protobuf:"bytes,5,rep,name=test_cases,json=testCases,proto3" json:"test_cases,omitempty"`
	// Directory to store benchmark results
	ResultDir     string `protobuf:"bytes,6,opt,name=result_dir,json=resultDir,proto3" json:"result_dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TBenchmarkConfig) Reset() {
	*x = TBenchmarkConfig{}
	mi := &file_app_config_bench_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TBenchmarkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBenchmarkConfig) ProtoMessage() {}

func (x *TBenchmarkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_bench_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBenchmarkConfig.ProtoReflect.Descriptor instead.
func (*TBenchmarkConfig) Descriptor() ([]byte, []int) {
	return file_app_config_bench_proto_rawDescGZIP(), []int{0}
}

func (x *TBenchmarkConfig) GetServer() isTBenchmarkConfig_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *TBenchmarkConfig) GetServerRemote() *TClientConfig {
	if x != nil {
		if x, ok := x.Server.(*TBenchmarkConfig_ServerRemote); ok {
			return x.ServerRemote
		}
	}
	return nil
}

func (x *TBenchmarkConfig) GetServerLocal() *TServerConfig {
	if x != nil {
		if x, ok := x.Server.(*TBenchmarkConfig_ServerLocal); ok {
			return x.ServerLocal
		}
	}
	return nil
}

func (x *TBenchmarkConfig) GetDataSourceInstance() *common.TGenericDataSourceInstance {
	if x != nil {
		return x.DataSourceInstance
	}
	return nil
}

func (x *TBenchmarkConfig) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *TBenchmarkConfig) GetTestCases() []*TBenchmarkTestCase {
	if x != nil {
		return x.TestCases
	}
	return nil
}

func (x *TBenchmarkConfig) GetResultDir() string {
	if x != nil {
		return x.ResultDir
	}
	return ""
}

type isTBenchmarkConfig_Server interface {
	isTBenchmarkConfig_Server()
}

type TBenchmarkConfig_ServerRemote struct {
	ServerRemote *TClientConfig `protobuf:"bytes,1,opt,name=server_remote,json=serverRemote,proto3,oneof"`
}

type TBenchmarkConfig_ServerLocal struct {
	ServerLocal *TServerConfig `protobuf:"bytes,2,opt,name=server_local,json=serverLocal,proto3,oneof"`
}

func (*TBenchmarkConfig_ServerRemote) isTBenchmarkConfig_Server() {}

func (*TBenchmarkConfig_ServerLocal) isTBenchmarkConfig_Server() {}

type TBenchmarkTestCase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Custom server parameters that may change from time to time
	// (applicable only if locally deployed (embedded) server is used).
	ServerParams *TBenchmarkServerParams `protobuf:"bytes,1,opt,name=server_params,json=serverParams,proto3" json:"server_params,omitempty"`
	// Custom parameters for client used within benchmarking tool.
	// If not set, the default behavior is enabled.
	ClientParams *TBenchmarkClientParams `protobuf:"bytes,3,opt,name=client_params,json=clientParams,proto3" json:"client_params,omitempty"`
	// List of columns that will be read from the tables.
	// If empty, all the columns will be read.
	Columns       []string `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TBenchmarkTestCase) Reset() {
	*x = TBenchmarkTestCase{}
	mi := &file_app_config_bench_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TBenchmarkTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBenchmarkTestCase) ProtoMessage() {}

func (x *TBenchmarkTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_bench_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBenchmarkTestCase.ProtoReflect.Descriptor instead.
func (*TBenchmarkTestCase) Descriptor() ([]byte, []int) {
	return file_app_config_bench_proto_rawDescGZIP(), []int{1}
}

func (x *TBenchmarkTestCase) GetServerParams() *TBenchmarkServerParams {
	if x != nil {
		return x.ServerParams
	}
	return nil
}

func (x *TBenchmarkTestCase) GetClientParams() *TBenchmarkClientParams {
	if x != nil {
		return x.ClientParams
	}
	return nil
}

func (x *TBenchmarkTestCase) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

// TBenchmarkServerParams contains server config params that will be applied
// to embedded Connector server at the time of start.
type TBenchmarkServerParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Paging        *TPagingConfig         `protobuf:"bytes,1,opt,name=paging,proto3" json:"paging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TBenchmarkServerParams) Reset() {
	*x = TBenchmarkServerParams{}
	mi := &file_app_config_bench_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TBenchmarkServerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBenchmarkServerParams) ProtoMessage() {}

func (x *TBenchmarkServerParams) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_bench_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBenchmarkServerParams.ProtoReflect.Descriptor instead.
func (*TBenchmarkServerParams) Descriptor() ([]byte, []int) {
	return file_app_config_bench_proto_rawDescGZIP(), []int{2}
}

func (x *TBenchmarkServerParams) GetPaging() *TPagingConfig {
	if x != nil {
		return x.Paging
	}
	return nil
}

// TBenchmarkLoadParams contains settings for network client used
// within benchmarking tool.
type TBenchmarkClientParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// number of queries emited per second by benchmark tool
	QueriesPerSecond float32 `protobuf:"fixed32,1,opt,name=queries_per_second,json=queriesPerSecond,proto3" json:"queries_per_second,omitempty"`
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	Duration      string `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TBenchmarkClientParams) Reset() {
	*x = TBenchmarkClientParams{}
	mi := &file_app_config_bench_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TBenchmarkClientParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBenchmarkClientParams) ProtoMessage() {}

func (x *TBenchmarkClientParams) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_bench_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBenchmarkClientParams.ProtoReflect.Descriptor instead.
func (*TBenchmarkClientParams) Descriptor() ([]byte, []int) {
	return file_app_config_bench_proto_rawDescGZIP(), []int{3}
}

func (x *TBenchmarkClientParams) GetQueriesPerSecond() float32 {
	if x != nil {
		return x.QueriesPerSecond
	}
	return 0
}

func (x *TBenchmarkClientParams) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

var File_app_config_bench_proto protoreflect.FileDescriptor

var file_app_config_bench_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x3b, 0x79, 0x71, 0x6c, 0x2f, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x70, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x93, 0x03, 0x0a, 0x10, 0x54, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x54, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x42, 0x08,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xde, 0x01, 0x0a, 0x12, 0x54, 0x42, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x42, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x5a, 0x0a, 0x16, 0x54, 0x42, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x62, 0x0a, 0x16, 0x54, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x66, 0x71, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_app_config_bench_proto_rawDescOnce sync.Once
	file_app_config_bench_proto_rawDescData []byte
)

func file_app_config_bench_proto_rawDescGZIP() []byte {
	file_app_config_bench_proto_rawDescOnce.Do(func() {
		file_app_config_bench_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_app_config_bench_proto_rawDesc), len(file_app_config_bench_proto_rawDesc)))
	})
	return file_app_config_bench_proto_rawDescData
}

var file_app_config_bench_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_app_config_bench_proto_goTypes = []any{
	(*TBenchmarkConfig)(nil),                  // 0: NYql.Connector.App.Config.TBenchmarkConfig
	(*TBenchmarkTestCase)(nil),                // 1: NYql.Connector.App.Config.TBenchmarkTestCase
	(*TBenchmarkServerParams)(nil),            // 2: NYql.Connector.App.Config.TBenchmarkServerParams
	(*TBenchmarkClientParams)(nil),            // 3: NYql.Connector.App.Config.TBenchmarkClientParams
	(*TClientConfig)(nil),                     // 4: NYql.Connector.App.Config.TClientConfig
	(*TServerConfig)(nil),                     // 5: NYql.Connector.App.Config.TServerConfig
	(*common.TGenericDataSourceInstance)(nil), // 6: NYql.TGenericDataSourceInstance
	(*TPagingConfig)(nil),                     // 7: NYql.Connector.App.Config.TPagingConfig
}
var file_app_config_bench_proto_depIdxs = []int32{
	4, // 0: NYql.Connector.App.Config.TBenchmarkConfig.server_remote:type_name -> NYql.Connector.App.Config.TClientConfig
	5, // 1: NYql.Connector.App.Config.TBenchmarkConfig.server_local:type_name -> NYql.Connector.App.Config.TServerConfig
	6, // 2: NYql.Connector.App.Config.TBenchmarkConfig.data_source_instance:type_name -> NYql.TGenericDataSourceInstance
	1, // 3: NYql.Connector.App.Config.TBenchmarkConfig.test_cases:type_name -> NYql.Connector.App.Config.TBenchmarkTestCase
	2, // 4: NYql.Connector.App.Config.TBenchmarkTestCase.server_params:type_name -> NYql.Connector.App.Config.TBenchmarkServerParams
	3, // 5: NYql.Connector.App.Config.TBenchmarkTestCase.client_params:type_name -> NYql.Connector.App.Config.TBenchmarkClientParams
	7, // 6: NYql.Connector.App.Config.TBenchmarkServerParams.paging:type_name -> NYql.Connector.App.Config.TPagingConfig
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_app_config_bench_proto_init() }
func file_app_config_bench_proto_init() {
	if File_app_config_bench_proto != nil {
		return
	}
	file_app_config_client_proto_init()
	file_app_config_server_proto_init()
	file_app_config_bench_proto_msgTypes[0].OneofWrappers = []any{
		(*TBenchmarkConfig_ServerRemote)(nil),
		(*TBenchmarkConfig_ServerLocal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_app_config_bench_proto_rawDesc), len(file_app_config_bench_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_app_config_bench_proto_goTypes,
		DependencyIndexes: file_app_config_bench_proto_depIdxs,
		MessageInfos:      file_app_config_bench_proto_msgTypes,
	}.Build()
	File_app_config_bench_proto = out.File
	file_app_config_bench_proto_goTypes = nil
	file_app_config_bench_proto_depIdxs = nil
}
