// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: app/config/server.proto

package config

import (
	common "github.com/ydb-platform/fq-connector-go/api/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ELogLevel enumerates standard levels of logging
type ELogLevel int32

const (
	ELogLevel_TRACE ELogLevel = 0
	ELogLevel_DEBUG ELogLevel = 1
	ELogLevel_INFO  ELogLevel = 2
	ELogLevel_WARN  ELogLevel = 3
	ELogLevel_ERROR ELogLevel = 4
	ELogLevel_FATAL ELogLevel = 5
)

// Enum value maps for ELogLevel.
var (
	ELogLevel_name = map[int32]string{
		0: "TRACE",
		1: "DEBUG",
		2: "INFO",
		3: "WARN",
		4: "ERROR",
		5: "FATAL",
	}
	ELogLevel_value = map[string]int32{
		"TRACE": 0,
		"DEBUG": 1,
		"INFO":  2,
		"WARN":  3,
		"ERROR": 4,
		"FATAL": 5,
	}
)

func (x ELogLevel) Enum() *ELogLevel {
	p := new(ELogLevel)
	*p = x
	return p
}

func (x ELogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_app_config_server_proto_enumTypes[0].Descriptor()
}

func (ELogLevel) Type() protoreflect.EnumType {
	return &file_app_config_server_proto_enumTypes[0]
}

func (x ELogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ELogLevel.Descriptor instead.
func (ELogLevel) EnumDescriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{0}
}

// Connector server configuration
type TServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Endpoint *common.TEndpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Deprecated: Do not use.
	Tls *TServerTLSConfig `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
	// TConnectorServerConfig contains configuration of the main GRPC server
	ConnectorServer *TConnectorServerConfig `protobuf:"bytes,5,opt,name=connector_server,json=connectorServer,proto3" json:"connector_server,omitempty"`
	// This is a rough restriction for YQ memory consumption until
	// https://st.yandex-team.ru/YQ-2057 is implemented.
	// Leave it empty if you want to avoid any memory limits.
	ReadLimit *TServerReadLimit `protobuf:"bytes,3,opt,name=read_limit,json=readLimit,proto3" json:"read_limit,omitempty"`
	// Logger config
	Logger *TLoggerConfig `protobuf:"bytes,4,opt,name=logger,proto3" json:"logger,omitempty"`
	// Go runtime profiler.
	// Disabled if this part of config is empty.
	PprofServer *TPprofServerConfig `protobuf:"bytes,6,opt,name=pprof_server,json=pprofServer,proto3" json:"pprof_server,omitempty"`
	// Metrics server config
	MetricsServer *TMetricsServerConfig `protobuf:"bytes,7,opt,name=metrics_server,json=metricsServer,proto3" json:"metrics_server,omitempty"`
	// Paging config
	Paging *TPagingConfig `protobuf:"bytes,8,opt,name=paging,proto3" json:"paging,omitempty"`
	// Data types conversion config
	Conversion *TConversionConfig `protobuf:"bytes,9,opt,name=conversion,proto3" json:"conversion,omitempty"`
	// Datasource-specific config
	Datasources *TDatasourcesConfig `protobuf:"bytes,10,opt,name=datasources,proto3" json:"datasources,omitempty"`
}

func (x *TServerConfig) Reset() {
	*x = TServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_config_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TServerConfig) ProtoMessage() {}

func (x *TServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TServerConfig.ProtoReflect.Descriptor instead.
func (*TServerConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Do not use.
func (x *TServerConfig) GetEndpoint() *common.TEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Deprecated: Do not use.
func (x *TServerConfig) GetTls() *TServerTLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *TServerConfig) GetConnectorServer() *TConnectorServerConfig {
	if x != nil {
		return x.ConnectorServer
	}
	return nil
}

func (x *TServerConfig) GetReadLimit() *TServerReadLimit {
	if x != nil {
		return x.ReadLimit
	}
	return nil
}

func (x *TServerConfig) GetLogger() *TLoggerConfig {
	if x != nil {
		return x.Logger
	}
	return nil
}

func (x *TServerConfig) GetPprofServer() *TPprofServerConfig {
	if x != nil {
		return x.PprofServer
	}
	return nil
}

func (x *TServerConfig) GetMetricsServer() *TMetricsServerConfig {
	if x != nil {
		return x.MetricsServer
	}
	return nil
}

func (x *TServerConfig) GetPaging() *TPagingConfig {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *TServerConfig) GetConversion() *TConversionConfig {
	if x != nil {
		return x.Conversion
	}
	return nil
}

func (x *TServerConfig) GetDatasources() *TDatasourcesConfig {
	if x != nil {
		return x.Datasources
	}
	return nil
}

// TConnectorServerConfig - configuration of the main GRPC server
type TConnectorServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network address server will be listening on
	Endpoint *common.TEndpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// TLS settings.
	// Leave it empty for insecure connections.
	Tls *TServerTLSConfig `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *TConnectorServerConfig) Reset() {
	*x = TConnectorServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_config_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TConnectorServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConnectorServerConfig) ProtoMessage() {}

func (x *TConnectorServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConnectorServerConfig.ProtoReflect.Descriptor instead.
func (*TConnectorServerConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{1}
}

func (x *TConnectorServerConfig) GetEndpoint() *common.TEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *TConnectorServerConfig) GetTls() *TServerTLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

type TServerTLSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TLS private key path
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// TLS public cert path
	Cert string `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (x *TServerTLSConfig) Reset() {
	*x = TServerTLSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_config_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TServerTLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TServerTLSConfig) ProtoMessage() {}

func (x *TServerTLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TServerTLSConfig.ProtoReflect.Descriptor instead.
func (*TServerTLSConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{2}
}

func (x *TServerTLSConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TServerTLSConfig) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

// ServerReadLimit limitates the amount of data extracted from the data source on every read request.
type TServerReadLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of rows extracted from the data source
	Rows uint64 `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
}

func (x *TServerReadLimit) Reset() {
	*x = TServerReadLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_config_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TServerReadLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TServerReadLimit) ProtoMessage() {}

func (x *TServerReadLimit) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TServerReadLimit.ProtoReflect.Descriptor instead.
func (*TServerReadLimit) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{3}
}

func (x *TServerReadLimit) GetRows() uint64 {
	if x != nil {
		return x.Rows
	}
	return 0
}

// TLogger represents logger configuration
type TLoggerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Level of logging
	LogLevel ELogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=NYql.Connector.App.Config.ELogLevel" json:"log_level,omitempty"`
	// Is logging of queries enabled
	EnableSqlQueryLogging bool `protobuf:"varint,2,opt,name=enable_sql_query_logging,json=enableSqlQueryLogging,proto3" json:"enable_sql_query_logging,omitempty"`
}

func (x *TLoggerConfig) Reset() {
	*x = TLoggerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_config_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLoggerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLoggerConfig) ProtoMessage() {}

func (x *TLoggerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLoggerConfig.ProtoReflect.Descriptor instead.
func (*TLoggerConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{4}
}

func (x *TLoggerConfig) GetLogLevel() ELogLevel {
	if x != nil {
		return x.LogLevel
	}
	return ELogLevel_TRACE
}

func (x *TLoggerConfig) GetEnableSqlQueryLogging() bool {
	if x != nil {
		return x.EnableSqlQueryLogging
	}
	return false
}

// TPprofServerConfig configures HTTP server delivering Go runtime profiler data
type TPprofServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network address server will be listening on
	Endpoint *common.TEndpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// TLS settings.
	// Leave it empty for insecure connections.
	Tls *TServerTLSConfig `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *TPprofServerConfig) Reset() {
	*x = TPprofServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_config_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPprofServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPprofServerConfig) ProtoMessage() {}

func (x *TPprofServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPprofServerConfig.ProtoReflect.Descriptor instead.
func (*TPprofServerConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{5}
}

func (x *TPprofServerConfig) GetEndpoint() *common.TEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *TPprofServerConfig) GetTls() *TServerTLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

// TMetricsConfig - configuration of the metrics service
type TMetricsServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network address server will be listening on
	Endpoint *common.TEndpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// TLS settings.
	// Leave it empty for insecure connections.
	Tls *TServerTLSConfig `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *TMetricsServerConfig) Reset() {
	*x = TMetricsServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_config_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMetricsServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMetricsServerConfig) ProtoMessage() {}

func (x *TMetricsServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMetricsServerConfig.ProtoReflect.Descriptor instead.
func (*TMetricsServerConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{6}
}

func (x *TMetricsServerConfig) GetEndpoint() *common.TEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *TMetricsServerConfig) GetTls() *TServerTLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

// TPagingConfig configures the way of splitting of the data stream into the fragments (or pages)
// in order to return them as separate GRPC messages to the client.
type TPagingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configures the limit of a page size in rows.
	// It may override other limits. Ignored if set to zero.
	RowsPerPage uint64 `protobuf:"varint,1,opt,name=rows_per_page,json=rowsPerPage,proto3" json:"rows_per_page,omitempty"`
	// Configures the limit of a page size in bytes.
	// It may override other limits. Ignored if set to zero.
	BytesPerPage uint64 `protobuf:"varint,2,opt,name=bytes_per_page,json=bytesPerPage,proto3" json:"bytes_per_page,omitempty"`
	// Connector service can read ahead some data from the data source before returning it to the client.
	// This setting configures the number of pages that may reside in the service's address space
	// waiting for the client readiness for the data consumption.
	// Tune this carefully cause this may cause service OOMs.
	PrefetchQueueCapacity uint32 `protobuf:"varint,3,opt,name=prefetch_queue_capacity,json=prefetchQueueCapacity,proto3" json:"prefetch_queue_capacity,omitempty"`
}

func (x *TPagingConfig) Reset() {
	*x = TPagingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_config_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPagingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPagingConfig) ProtoMessage() {}

func (x *TPagingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPagingConfig.ProtoReflect.Descriptor instead.
func (*TPagingConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{7}
}

func (x *TPagingConfig) GetRowsPerPage() uint64 {
	if x != nil {
		return x.RowsPerPage
	}
	return 0
}

func (x *TPagingConfig) GetBytesPerPage() uint64 {
	if x != nil {
		return x.BytesPerPage
	}
	return 0
}

func (x *TPagingConfig) GetPrefetchQueueCapacity() uint32 {
	if x != nil {
		return x.PrefetchQueueCapacity
	}
	return 0
}

// TConversionConfig configures some aspects of the data conversion process
// between the data source native type system, Go type system and Arrow type system
type TConversionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enables microoptimized code that can potentially crash the service
	UseUnsafeConverters bool `protobuf:"varint,1,opt,name=use_unsafe_converters,json=useUnsafeConverters,proto3" json:"use_unsafe_converters,omitempty"`
}

func (x *TConversionConfig) Reset() {
	*x = TConversionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_config_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TConversionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConversionConfig) ProtoMessage() {}

func (x *TConversionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConversionConfig.ProtoReflect.Descriptor instead.
func (*TConversionConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{8}
}

func (x *TConversionConfig) GetUseUnsafeConverters() bool {
	if x != nil {
		return x.UseUnsafeConverters
	}
	return false
}

// TYdbConfig contains settings specific for YDB data source
type TYdbConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timeout for YDB connection opening.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	OpenConnectionTimeout string `protobuf:"bytes,1,opt,name=open_connection_timeout,json=openConnectionTimeout,proto3" json:"open_connection_timeout,omitempty"`
	// Timeout for YDB connection pinging.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	PingConnectionTimeout string `protobuf:"bytes,2,opt,name=ping_connection_timeout,json=pingConnectionTimeout,proto3" json:"ping_connection_timeout,omitempty"`
}

func (x *TYdbConfig) Reset() {
	*x = TYdbConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_config_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TYdbConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TYdbConfig) ProtoMessage() {}

func (x *TYdbConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TYdbConfig.ProtoReflect.Descriptor instead.
func (*TYdbConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{9}
}

func (x *TYdbConfig) GetOpenConnectionTimeout() string {
	if x != nil {
		return x.OpenConnectionTimeout
	}
	return ""
}

func (x *TYdbConfig) GetPingConnectionTimeout() string {
	if x != nil {
		return x.PingConnectionTimeout
	}
	return ""
}

// TDatasouceConfig is a collection of datasource-specific settings
type TDatasourcesConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ydb *TYdbConfig `protobuf:"bytes,1,opt,name=ydb,proto3" json:"ydb,omitempty"`
}

func (x *TDatasourcesConfig) Reset() {
	*x = TDatasourcesConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_config_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDatasourcesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDatasourcesConfig) ProtoMessage() {}

func (x *TDatasourcesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDatasourcesConfig.ProtoReflect.Descriptor instead.
func (*TDatasourcesConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{10}
}

func (x *TDatasourcesConfig) GetYdb() *TYdbConfig {
	if x != nil {
		return x.Ydb
	}
	return nil
}

var File_app_config_server_proto protoreflect.FileDescriptor

var file_app_config_server_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x45, 0x79, 0x64, 0x62, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2f, 0x79, 0x71, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x06, 0x0a, 0x0d,
	0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4e, 0x59,
	0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x52, 0x03, 0x74, 0x6c,
	0x73, 0x12, 0x5c, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x4e, 0x59,
	0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x4a, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x59,
	0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x50, 0x0a,
	0x0c, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x50, 0x70, 0x72, 0x6f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0b, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x56, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41,
	0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4e,
	0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x16, 0x54, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x3d, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41,
	0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22,
	0x3e, 0x0a, 0x10, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22,
	0x26, 0x0a, 0x10, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x54, 0x4c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x4e,
	0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x18,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x54, 0x50, 0x70, 0x72, 0x6f, 0x66,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x03, 0x74, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x54, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x4e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4e, 0x59,
	0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x91, 0x01,
	0x0a, 0x0d, 0x54, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x22, 0x47, 0x0a, 0x11, 0x54, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x75, 0x6e,
	0x73, 0x61, 0x66, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x73, 0x22, 0x7c, 0x0a, 0x0a, 0x54, 0x59,
	0x64, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x36, 0x0a, 0x17, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x4d, 0x0a, 0x12, 0x54, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37,
	0x0a, 0x03, 0x79, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4e, 0x59,
	0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x59, 0x64, 0x62, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x03, 0x79, 0x64, 0x62, 0x2a, 0x4b, 0x0a, 0x09, 0x45, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54,
	0x41, 0x4c, 0x10, 0x05, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x66, 0x71, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x67, 0x6f, 0x2f,
	0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_app_config_server_proto_rawDescOnce sync.Once
	file_app_config_server_proto_rawDescData = file_app_config_server_proto_rawDesc
)

func file_app_config_server_proto_rawDescGZIP() []byte {
	file_app_config_server_proto_rawDescOnce.Do(func() {
		file_app_config_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_config_server_proto_rawDescData)
	})
	return file_app_config_server_proto_rawDescData
}

var file_app_config_server_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_app_config_server_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_app_config_server_proto_goTypes = []interface{}{
	(ELogLevel)(0),                 // 0: NYql.Connector.App.Config.ELogLevel
	(*TServerConfig)(nil),          // 1: NYql.Connector.App.Config.TServerConfig
	(*TConnectorServerConfig)(nil), // 2: NYql.Connector.App.Config.TConnectorServerConfig
	(*TServerTLSConfig)(nil),       // 3: NYql.Connector.App.Config.TServerTLSConfig
	(*TServerReadLimit)(nil),       // 4: NYql.Connector.App.Config.TServerReadLimit
	(*TLoggerConfig)(nil),          // 5: NYql.Connector.App.Config.TLoggerConfig
	(*TPprofServerConfig)(nil),     // 6: NYql.Connector.App.Config.TPprofServerConfig
	(*TMetricsServerConfig)(nil),   // 7: NYql.Connector.App.Config.TMetricsServerConfig
	(*TPagingConfig)(nil),          // 8: NYql.Connector.App.Config.TPagingConfig
	(*TConversionConfig)(nil),      // 9: NYql.Connector.App.Config.TConversionConfig
	(*TYdbConfig)(nil),             // 10: NYql.Connector.App.Config.TYdbConfig
	(*TDatasourcesConfig)(nil),     // 11: NYql.Connector.App.Config.TDatasourcesConfig
	(*common.TEndpoint)(nil),       // 12: NYql.NConnector.NApi.TEndpoint
}
var file_app_config_server_proto_depIdxs = []int32{
	12, // 0: NYql.Connector.App.Config.TServerConfig.endpoint:type_name -> NYql.NConnector.NApi.TEndpoint
	3,  // 1: NYql.Connector.App.Config.TServerConfig.tls:type_name -> NYql.Connector.App.Config.TServerTLSConfig
	2,  // 2: NYql.Connector.App.Config.TServerConfig.connector_server:type_name -> NYql.Connector.App.Config.TConnectorServerConfig
	4,  // 3: NYql.Connector.App.Config.TServerConfig.read_limit:type_name -> NYql.Connector.App.Config.TServerReadLimit
	5,  // 4: NYql.Connector.App.Config.TServerConfig.logger:type_name -> NYql.Connector.App.Config.TLoggerConfig
	6,  // 5: NYql.Connector.App.Config.TServerConfig.pprof_server:type_name -> NYql.Connector.App.Config.TPprofServerConfig
	7,  // 6: NYql.Connector.App.Config.TServerConfig.metrics_server:type_name -> NYql.Connector.App.Config.TMetricsServerConfig
	8,  // 7: NYql.Connector.App.Config.TServerConfig.paging:type_name -> NYql.Connector.App.Config.TPagingConfig
	9,  // 8: NYql.Connector.App.Config.TServerConfig.conversion:type_name -> NYql.Connector.App.Config.TConversionConfig
	11, // 9: NYql.Connector.App.Config.TServerConfig.datasources:type_name -> NYql.Connector.App.Config.TDatasourcesConfig
	12, // 10: NYql.Connector.App.Config.TConnectorServerConfig.endpoint:type_name -> NYql.NConnector.NApi.TEndpoint
	3,  // 11: NYql.Connector.App.Config.TConnectorServerConfig.tls:type_name -> NYql.Connector.App.Config.TServerTLSConfig
	0,  // 12: NYql.Connector.App.Config.TLoggerConfig.log_level:type_name -> NYql.Connector.App.Config.ELogLevel
	12, // 13: NYql.Connector.App.Config.TPprofServerConfig.endpoint:type_name -> NYql.NConnector.NApi.TEndpoint
	3,  // 14: NYql.Connector.App.Config.TPprofServerConfig.tls:type_name -> NYql.Connector.App.Config.TServerTLSConfig
	12, // 15: NYql.Connector.App.Config.TMetricsServerConfig.endpoint:type_name -> NYql.NConnector.NApi.TEndpoint
	3,  // 16: NYql.Connector.App.Config.TMetricsServerConfig.tls:type_name -> NYql.Connector.App.Config.TServerTLSConfig
	10, // 17: NYql.Connector.App.Config.TDatasourcesConfig.ydb:type_name -> NYql.Connector.App.Config.TYdbConfig
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_app_config_server_proto_init() }
func file_app_config_server_proto_init() {
	if File_app_config_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_app_config_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_config_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TConnectorServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_config_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TServerTLSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_config_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TServerReadLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_config_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLoggerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_config_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPprofServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_config_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMetricsServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_config_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPagingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_config_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TConversionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_config_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TYdbConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_config_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDatasourcesConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_config_server_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_app_config_server_proto_goTypes,
		DependencyIndexes: file_app_config_server_proto_depIdxs,
		EnumInfos:         file_app_config_server_proto_enumTypes,
		MessageInfos:      file_app_config_server_proto_msgTypes,
	}.Build()
	File_app_config_server_proto = out.File
	file_app_config_server_proto_rawDesc = nil
	file_app_config_server_proto_goTypes = nil
	file_app_config_server_proto_depIdxs = nil
}
