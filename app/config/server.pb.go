// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: app/config/server.proto

package config

import (
	common "github.com/ydb-platform/fq-connector-go/api/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ELogLevel enumerates standard levels of logging
type ELogLevel int32

const (
	ELogLevel_TRACE ELogLevel = 0
	ELogLevel_DEBUG ELogLevel = 1
	ELogLevel_INFO  ELogLevel = 2
	ELogLevel_WARN  ELogLevel = 3
	ELogLevel_ERROR ELogLevel = 4
	ELogLevel_FATAL ELogLevel = 5
)

// Enum value maps for ELogLevel.
var (
	ELogLevel_name = map[int32]string{
		0: "TRACE",
		1: "DEBUG",
		2: "INFO",
		3: "WARN",
		4: "ERROR",
		5: "FATAL",
	}
	ELogLevel_value = map[string]int32{
		"TRACE": 0,
		"DEBUG": 1,
		"INFO":  2,
		"WARN":  3,
		"ERROR": 4,
		"FATAL": 5,
	}
)

func (x ELogLevel) Enum() *ELogLevel {
	p := new(ELogLevel)
	*p = x
	return p
}

func (x ELogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_app_config_server_proto_enumTypes[0].Descriptor()
}

func (ELogLevel) Type() protoreflect.EnumType {
	return &file_app_config_server_proto_enumTypes[0]
}

func (x ELogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ELogLevel.Descriptor instead.
func (ELogLevel) EnumDescriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{0}
}

type TYdbConfig_Mode int32

const (
	TYdbConfig_MODE_UNSPECIFIED TYdbConfig_Mode = 0
	// In MODE_TABLE_SERVICE_STDLIB_SCAN_QUERIES the YDB connector uses YDB's Table Service
	// via Go's standard library database/sql interface.
	// All the requests are marked as scan queries.
	TYdbConfig_MODE_TABLE_SERVICE_STDLIB_SCAN_QUERIES TYdbConfig_Mode = 1
	// In MODE_QUERY_SERVICE_NATIVE the YDB connector uses YDB's Query Service
	// via native YDB interface.
	TYdbConfig_MODE_QUERY_SERVICE_NATIVE TYdbConfig_Mode = 2
)

// Enum value maps for TYdbConfig_Mode.
var (
	TYdbConfig_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_TABLE_SERVICE_STDLIB_SCAN_QUERIES",
		2: "MODE_QUERY_SERVICE_NATIVE",
	}
	TYdbConfig_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED":                       0,
		"MODE_TABLE_SERVICE_STDLIB_SCAN_QUERIES": 1,
		"MODE_QUERY_SERVICE_NATIVE":              2,
	}
)

func (x TYdbConfig_Mode) Enum() *TYdbConfig_Mode {
	p := new(TYdbConfig_Mode)
	*p = x
	return p
}

func (x TYdbConfig_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TYdbConfig_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_app_config_server_proto_enumTypes[1].Descriptor()
}

func (TYdbConfig_Mode) Type() protoreflect.EnumType {
	return &file_app_config_server_proto_enumTypes[1]
}

func (x TYdbConfig_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TYdbConfig_Mode.Descriptor instead.
func (TYdbConfig_Mode) EnumDescriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{19, 0}
}

// Connector server configuration
type TServerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in app/config/server.proto.
	Endpoint *common.TGenericEndpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Deprecated: Marked as deprecated in app/config/server.proto.
	Tls *TServerTLSConfig `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
	// TConnectorServerConfig contains configuration of the main GRPC server
	ConnectorServer *TConnectorServerConfig `protobuf:"bytes,5,opt,name=connector_server,json=connectorServer,proto3" json:"connector_server,omitempty"`
	// This is a rough restriction for YQ memory consumption until
	// https://st.yandex-team.ru/YQ-2057 is implemented.
	// Leave it empty if you want to avoid any memory limits.
	ReadLimit *TServerReadLimit `protobuf:"bytes,3,opt,name=read_limit,json=readLimit,proto3" json:"read_limit,omitempty"`
	// Logger config
	Logger *TLoggerConfig `protobuf:"bytes,4,opt,name=logger,proto3" json:"logger,omitempty"`
	// Go runtime profiler.
	// Disabled if this part of config is empty.
	PprofServer *TPprofServerConfig `protobuf:"bytes,6,opt,name=pprof_server,json=pprofServer,proto3" json:"pprof_server,omitempty"`
	// Metrics server config
	MetricsServer *TMetricsServerConfig `protobuf:"bytes,7,opt,name=metrics_server,json=metricsServer,proto3" json:"metrics_server,omitempty"`
	// Paging config
	Paging *TPagingConfig `protobuf:"bytes,8,opt,name=paging,proto3" json:"paging,omitempty"`
	// Data types conversion config
	Conversion *TConversionConfig `protobuf:"bytes,9,opt,name=conversion,proto3" json:"conversion,omitempty"`
	// Datasource-specific config
	Datasources   *TDatasourcesConfig `protobuf:"bytes,10,opt,name=datasources,proto3" json:"datasources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TServerConfig) Reset() {
	*x = TServerConfig{}
	mi := &file_app_config_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TServerConfig) ProtoMessage() {}

func (x *TServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TServerConfig.ProtoReflect.Descriptor instead.
func (*TServerConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in app/config/server.proto.
func (x *TServerConfig) GetEndpoint() *common.TGenericEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Deprecated: Marked as deprecated in app/config/server.proto.
func (x *TServerConfig) GetTls() *TServerTLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *TServerConfig) GetConnectorServer() *TConnectorServerConfig {
	if x != nil {
		return x.ConnectorServer
	}
	return nil
}

func (x *TServerConfig) GetReadLimit() *TServerReadLimit {
	if x != nil {
		return x.ReadLimit
	}
	return nil
}

func (x *TServerConfig) GetLogger() *TLoggerConfig {
	if x != nil {
		return x.Logger
	}
	return nil
}

func (x *TServerConfig) GetPprofServer() *TPprofServerConfig {
	if x != nil {
		return x.PprofServer
	}
	return nil
}

func (x *TServerConfig) GetMetricsServer() *TMetricsServerConfig {
	if x != nil {
		return x.MetricsServer
	}
	return nil
}

func (x *TServerConfig) GetPaging() *TPagingConfig {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *TServerConfig) GetConversion() *TConversionConfig {
	if x != nil {
		return x.Conversion
	}
	return nil
}

func (x *TServerConfig) GetDatasources() *TDatasourcesConfig {
	if x != nil {
		return x.Datasources
	}
	return nil
}

// TConnectorServerConfig - configuration of the main GRPC server
type TConnectorServerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Network address server will be listening on
	Endpoint *common.TGenericEndpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// TLS settings.
	// Leave it empty for insecure connections.
	Tls *TServerTLSConfig `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
	// Defines maximum GRPC request size
	MaxRecvMessageSize uint64 `protobuf:"varint,3,opt,name=max_recv_message_size,json=maxRecvMessageSize,proto3" json:"max_recv_message_size,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TConnectorServerConfig) Reset() {
	*x = TConnectorServerConfig{}
	mi := &file_app_config_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TConnectorServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConnectorServerConfig) ProtoMessage() {}

func (x *TConnectorServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConnectorServerConfig.ProtoReflect.Descriptor instead.
func (*TConnectorServerConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{1}
}

func (x *TConnectorServerConfig) GetEndpoint() *common.TGenericEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *TConnectorServerConfig) GetTls() *TServerTLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *TConnectorServerConfig) GetMaxRecvMessageSize() uint64 {
	if x != nil {
		return x.MaxRecvMessageSize
	}
	return 0
}

type TServerTLSConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TLS private key path
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// TLS public cert path
	Cert          string `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TServerTLSConfig) Reset() {
	*x = TServerTLSConfig{}
	mi := &file_app_config_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TServerTLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TServerTLSConfig) ProtoMessage() {}

func (x *TServerTLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TServerTLSConfig.ProtoReflect.Descriptor instead.
func (*TServerTLSConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{2}
}

func (x *TServerTLSConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TServerTLSConfig) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

// ServerReadLimit limitates the amount of data extracted from the data source on every read request.
type TServerReadLimit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of rows extracted from the data source
	Rows          uint64 `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TServerReadLimit) Reset() {
	*x = TServerReadLimit{}
	mi := &file_app_config_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TServerReadLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TServerReadLimit) ProtoMessage() {}

func (x *TServerReadLimit) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TServerReadLimit.ProtoReflect.Descriptor instead.
func (*TServerReadLimit) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{3}
}

func (x *TServerReadLimit) GetRows() uint64 {
	if x != nil {
		return x.Rows
	}
	return 0
}

// TLogger represents logger configuration
type TLoggerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Level of logging
	LogLevel ELogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=NYql.Connector.App.Config.ELogLevel" json:"log_level,omitempty"`
	// Is logging of queries enabled
	EnableSqlQueryLogging bool `protobuf:"varint,2,opt,name=enable_sql_query_logging,json=enableSqlQueryLogging,proto3" json:"enable_sql_query_logging,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TLoggerConfig) Reset() {
	*x = TLoggerConfig{}
	mi := &file_app_config_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLoggerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLoggerConfig) ProtoMessage() {}

func (x *TLoggerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLoggerConfig.ProtoReflect.Descriptor instead.
func (*TLoggerConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{4}
}

func (x *TLoggerConfig) GetLogLevel() ELogLevel {
	if x != nil {
		return x.LogLevel
	}
	return ELogLevel_TRACE
}

func (x *TLoggerConfig) GetEnableSqlQueryLogging() bool {
	if x != nil {
		return x.EnableSqlQueryLogging
	}
	return false
}

// TPprofServerConfig configures HTTP server delivering Go runtime profiler data
type TPprofServerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Network address server will be listening on
	Endpoint *common.TGenericEndpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// TLS settings.
	// Leave it empty for insecure connections.
	Tls           *TServerTLSConfig `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TPprofServerConfig) Reset() {
	*x = TPprofServerConfig{}
	mi := &file_app_config_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPprofServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPprofServerConfig) ProtoMessage() {}

func (x *TPprofServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPprofServerConfig.ProtoReflect.Descriptor instead.
func (*TPprofServerConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{5}
}

func (x *TPprofServerConfig) GetEndpoint() *common.TGenericEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *TPprofServerConfig) GetTls() *TServerTLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

// TMetricsConfig - configuration of the metrics service
type TMetricsServerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Network address server will be listening on
	Endpoint *common.TGenericEndpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// TLS settings.
	// Leave it empty for insecure connections.
	Tls           *TServerTLSConfig `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TMetricsServerConfig) Reset() {
	*x = TMetricsServerConfig{}
	mi := &file_app_config_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TMetricsServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMetricsServerConfig) ProtoMessage() {}

func (x *TMetricsServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMetricsServerConfig.ProtoReflect.Descriptor instead.
func (*TMetricsServerConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{6}
}

func (x *TMetricsServerConfig) GetEndpoint() *common.TGenericEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *TMetricsServerConfig) GetTls() *TServerTLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

// TPagingConfig configures the way of splitting of the data stream into the fragments (or pages)
// in order to return them as separate GRPC messages to the client.
type TPagingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configures the limit of a page size in rows.
	// It may override other limits. Ignored if set to zero.
	RowsPerPage uint64 `protobuf:"varint,1,opt,name=rows_per_page,json=rowsPerPage,proto3" json:"rows_per_page,omitempty"`
	// Configures the limit of a page size in bytes.
	// It may override other limits. Ignored if set to zero.
	BytesPerPage uint64 `protobuf:"varint,2,opt,name=bytes_per_page,json=bytesPerPage,proto3" json:"bytes_per_page,omitempty"`
	// Connector service can read ahead some data from the data source before returning it to the client.
	// This setting configures the number of pages that may reside in the service's address space
	// waiting for the client readiness for the data consumption.
	// Tune this carefully cause this may cause service OOMs.
	PrefetchQueueCapacity uint32 `protobuf:"varint,3,opt,name=prefetch_queue_capacity,json=prefetchQueueCapacity,proto3" json:"prefetch_queue_capacity,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TPagingConfig) Reset() {
	*x = TPagingConfig{}
	mi := &file_app_config_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPagingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPagingConfig) ProtoMessage() {}

func (x *TPagingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPagingConfig.ProtoReflect.Descriptor instead.
func (*TPagingConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{7}
}

func (x *TPagingConfig) GetRowsPerPage() uint64 {
	if x != nil {
		return x.RowsPerPage
	}
	return 0
}

func (x *TPagingConfig) GetBytesPerPage() uint64 {
	if x != nil {
		return x.BytesPerPage
	}
	return 0
}

func (x *TPagingConfig) GetPrefetchQueueCapacity() uint32 {
	if x != nil {
		return x.PrefetchQueueCapacity
	}
	return 0
}

// TConversionConfig configures some aspects of the data conversion process
// between the data source native type system, Go type system and Arrow type system
type TConversionConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enables microoptimized code that can potentially crash the service
	UseUnsafeConverters bool `protobuf:"varint,1,opt,name=use_unsafe_converters,json=useUnsafeConverters,proto3" json:"use_unsafe_converters,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TConversionConfig) Reset() {
	*x = TConversionConfig{}
	mi := &file_app_config_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TConversionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConversionConfig) ProtoMessage() {}

func (x *TConversionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConversionConfig.ProtoReflect.Descriptor instead.
func (*TConversionConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{8}
}

func (x *TConversionConfig) GetUseUnsafeConverters() bool {
	if x != nil {
		return x.UseUnsafeConverters
	}
	return false
}

// TExponentialBackoffConfig provides configuration for the exponential backoff
// which is used for retries of the operations ended up with transient errors.
type TExponentialBackoffConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Initial interval between retries
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	InitialInterval string `protobuf:"bytes,1,opt,name=initial_interval,json=initialInterval,proto3" json:"initial_interval,omitempty"`
	// Maximum total time for retries
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	MaxInterval string `protobuf:"bytes,2,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
	// Randomization factor to add jitter to intervals
	RandomizationFactor float64 `protobuf:"fixed64,3,opt,name=randomization_factor,json=randomizationFactor,proto3" json:"randomization_factor,omitempty"`
	// Multiplier for increasing the interval after each retry
	Multiplier float64 `protobuf:"fixed64,4,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	// Maximum interval between retries
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	MaxElapsedTime string `protobuf:"bytes,5,opt,name=max_elapsed_time,json=maxElapsedTime,proto3" json:"max_elapsed_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TExponentialBackoffConfig) Reset() {
	*x = TExponentialBackoffConfig{}
	mi := &file_app_config_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TExponentialBackoffConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TExponentialBackoffConfig) ProtoMessage() {}

func (x *TExponentialBackoffConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TExponentialBackoffConfig.ProtoReflect.Descriptor instead.
func (*TExponentialBackoffConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{9}
}

func (x *TExponentialBackoffConfig) GetInitialInterval() string {
	if x != nil {
		return x.InitialInterval
	}
	return ""
}

func (x *TExponentialBackoffConfig) GetMaxInterval() string {
	if x != nil {
		return x.MaxInterval
	}
	return ""
}

func (x *TExponentialBackoffConfig) GetRandomizationFactor() float64 {
	if x != nil {
		return x.RandomizationFactor
	}
	return 0
}

func (x *TExponentialBackoffConfig) GetMultiplier() float64 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *TExponentialBackoffConfig) GetMaxElapsedTime() string {
	if x != nil {
		return x.MaxElapsedTime
	}
	return ""
}

// TPushdownConfig contains various settings for predicate pushdown
type TPushdownConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enables filter pushdown for columns of YQL Timestamp type
	EnableTimestampPushdown bool `protobuf:"varint,1,opt,name=enable_timestamp_pushdown,json=enableTimestampPushdown,proto3" json:"enable_timestamp_pushdown,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TPushdownConfig) Reset() {
	*x = TPushdownConfig{}
	mi := &file_app_config_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPushdownConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPushdownConfig) ProtoMessage() {}

func (x *TPushdownConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPushdownConfig.ProtoReflect.Descriptor instead.
func (*TPushdownConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{10}
}

func (x *TPushdownConfig) GetEnableTimestampPushdown() bool {
	if x != nil {
		return x.EnableTimestampPushdown
	}
	return false
}

// TClickHouseConfig contains settings specific for ClickHouse data source
type TClickHouseConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timeout for ClickHouse connection opening.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	OpenConnectionTimeout string `protobuf:"bytes,1,opt,name=open_connection_timeout,json=openConnectionTimeout,proto3" json:"open_connection_timeout,omitempty"`
	// Timeout for ClickHouse connection pinging.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	PingConnectionTimeout string                     `protobuf:"bytes,2,opt,name=ping_connection_timeout,json=pingConnectionTimeout,proto3" json:"ping_connection_timeout,omitempty"`
	ExponentialBackoff    *TExponentialBackoffConfig `protobuf:"bytes,10,opt,name=exponential_backoff,json=exponentialBackoff,proto3" json:"exponential_backoff,omitempty"`
	Pushdown              *TPushdownConfig           `protobuf:"bytes,11,opt,name=pushdown,proto3" json:"pushdown,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TClickHouseConfig) Reset() {
	*x = TClickHouseConfig{}
	mi := &file_app_config_server_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TClickHouseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TClickHouseConfig) ProtoMessage() {}

func (x *TClickHouseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TClickHouseConfig.ProtoReflect.Descriptor instead.
func (*TClickHouseConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{11}
}

func (x *TClickHouseConfig) GetOpenConnectionTimeout() string {
	if x != nil {
		return x.OpenConnectionTimeout
	}
	return ""
}

func (x *TClickHouseConfig) GetPingConnectionTimeout() string {
	if x != nil {
		return x.PingConnectionTimeout
	}
	return ""
}

func (x *TClickHouseConfig) GetExponentialBackoff() *TExponentialBackoffConfig {
	if x != nil {
		return x.ExponentialBackoff
	}
	return nil
}

func (x *TClickHouseConfig) GetPushdown() *TPushdownConfig {
	if x != nil {
		return x.Pushdown
	}
	return nil
}

// TGreenplumConfig contains settings specific for Greenplum data source
type TGreenplumConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timeout for Greenplum connection opening.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	OpenConnectionTimeout string                     `protobuf:"bytes,1,opt,name=open_connection_timeout,json=openConnectionTimeout,proto3" json:"open_connection_timeout,omitempty"`
	ExponentialBackoff    *TExponentialBackoffConfig `protobuf:"bytes,10,opt,name=exponential_backoff,json=exponentialBackoff,proto3" json:"exponential_backoff,omitempty"`
	Pushdown              *TPushdownConfig           `protobuf:"bytes,11,opt,name=pushdown,proto3" json:"pushdown,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TGreenplumConfig) Reset() {
	*x = TGreenplumConfig{}
	mi := &file_app_config_server_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TGreenplumConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGreenplumConfig) ProtoMessage() {}

func (x *TGreenplumConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGreenplumConfig.ProtoReflect.Descriptor instead.
func (*TGreenplumConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{12}
}

func (x *TGreenplumConfig) GetOpenConnectionTimeout() string {
	if x != nil {
		return x.OpenConnectionTimeout
	}
	return ""
}

func (x *TGreenplumConfig) GetExponentialBackoff() *TExponentialBackoffConfig {
	if x != nil {
		return x.ExponentialBackoff
	}
	return nil
}

func (x *TGreenplumConfig) GetPushdown() *TPushdownConfig {
	if x != nil {
		return x.Pushdown
	}
	return nil
}

// TMsSQLServerConfig contains settings specific for MsSQLServer data source
type TMsSQLServerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timeout for ClickHouse connection opening.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	OpenConnectionTimeout string `protobuf:"bytes,2,opt,name=open_connection_timeout,json=openConnectionTimeout,proto3" json:"open_connection_timeout,omitempty"`
	// Timeout for MsSQLServer connection pinging.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	PingConnectionTimeout string                     `protobuf:"bytes,1,opt,name=ping_connection_timeout,json=pingConnectionTimeout,proto3" json:"ping_connection_timeout,omitempty"`
	ExponentialBackoff    *TExponentialBackoffConfig `protobuf:"bytes,10,opt,name=exponential_backoff,json=exponentialBackoff,proto3" json:"exponential_backoff,omitempty"`
	Pushdown              *TPushdownConfig           `protobuf:"bytes,11,opt,name=pushdown,proto3" json:"pushdown,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TMsSQLServerConfig) Reset() {
	*x = TMsSQLServerConfig{}
	mi := &file_app_config_server_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TMsSQLServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMsSQLServerConfig) ProtoMessage() {}

func (x *TMsSQLServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMsSQLServerConfig.ProtoReflect.Descriptor instead.
func (*TMsSQLServerConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{13}
}

func (x *TMsSQLServerConfig) GetOpenConnectionTimeout() string {
	if x != nil {
		return x.OpenConnectionTimeout
	}
	return ""
}

func (x *TMsSQLServerConfig) GetPingConnectionTimeout() string {
	if x != nil {
		return x.PingConnectionTimeout
	}
	return ""
}

func (x *TMsSQLServerConfig) GetExponentialBackoff() *TExponentialBackoffConfig {
	if x != nil {
		return x.ExponentialBackoff
	}
	return nil
}

func (x *TMsSQLServerConfig) GetPushdown() *TPushdownConfig {
	if x != nil {
		return x.Pushdown
	}
	return nil
}

type TMySQLConfig struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ResultChanCapacity uint64                 `protobuf:"varint,1,opt,name=result_chan_capacity,json=resultChanCapacity,proto3" json:"result_chan_capacity,omitempty"`
	// Timeout for MySQL connection opening.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	OpenConnectionTimeout string                     `protobuf:"bytes,2,opt,name=open_connection_timeout,json=openConnectionTimeout,proto3" json:"open_connection_timeout,omitempty"`
	ExponentialBackoff    *TExponentialBackoffConfig `protobuf:"bytes,10,opt,name=exponential_backoff,json=exponentialBackoff,proto3" json:"exponential_backoff,omitempty"`
	Pushdown              *TPushdownConfig           `protobuf:"bytes,11,opt,name=pushdown,proto3" json:"pushdown,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TMySQLConfig) Reset() {
	*x = TMySQLConfig{}
	mi := &file_app_config_server_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TMySQLConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMySQLConfig) ProtoMessage() {}

func (x *TMySQLConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMySQLConfig.ProtoReflect.Descriptor instead.
func (*TMySQLConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{14}
}

func (x *TMySQLConfig) GetResultChanCapacity() uint64 {
	if x != nil {
		return x.ResultChanCapacity
	}
	return 0
}

func (x *TMySQLConfig) GetOpenConnectionTimeout() string {
	if x != nil {
		return x.OpenConnectionTimeout
	}
	return ""
}

func (x *TMySQLConfig) GetExponentialBackoff() *TExponentialBackoffConfig {
	if x != nil {
		return x.ExponentialBackoff
	}
	return nil
}

func (x *TMySQLConfig) GetPushdown() *TPushdownConfig {
	if x != nil {
		return x.Pushdown
	}
	return nil
}

// TOracleConfig contains settings specific for Oracle data source
type TOracleConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timeout for Oracle connection opening.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	OpenConnectionTimeout string `protobuf:"bytes,1,opt,name=open_connection_timeout,json=openConnectionTimeout,proto3" json:"open_connection_timeout,omitempty"`
	// Timeout for Oracle connection pinging.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	PingConnectionTimeout string                     `protobuf:"bytes,2,opt,name=ping_connection_timeout,json=pingConnectionTimeout,proto3" json:"ping_connection_timeout,omitempty"`
	ExponentialBackoff    *TExponentialBackoffConfig `protobuf:"bytes,10,opt,name=exponential_backoff,json=exponentialBackoff,proto3" json:"exponential_backoff,omitempty"`
	Pushdown              *TPushdownConfig           `protobuf:"bytes,11,opt,name=pushdown,proto3" json:"pushdown,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TOracleConfig) Reset() {
	*x = TOracleConfig{}
	mi := &file_app_config_server_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TOracleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOracleConfig) ProtoMessage() {}

func (x *TOracleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOracleConfig.ProtoReflect.Descriptor instead.
func (*TOracleConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{15}
}

func (x *TOracleConfig) GetOpenConnectionTimeout() string {
	if x != nil {
		return x.OpenConnectionTimeout
	}
	return ""
}

func (x *TOracleConfig) GetPingConnectionTimeout() string {
	if x != nil {
		return x.PingConnectionTimeout
	}
	return ""
}

func (x *TOracleConfig) GetExponentialBackoff() *TExponentialBackoffConfig {
	if x != nil {
		return x.ExponentialBackoff
	}
	return nil
}

func (x *TOracleConfig) GetPushdown() *TPushdownConfig {
	if x != nil {
		return x.Pushdown
	}
	return nil
}

// TMongoDbConfig contains settings specific for Oracle data source
type TMongoDbConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timeout for MongoDB connection opening.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	OpenConnectionTimeout string `protobuf:"bytes,1,opt,name=open_connection_timeout,json=openConnectionTimeout,proto3" json:"open_connection_timeout,omitempty"`
	// Timeout for MongoDB connection pinging.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	PingConnectionTimeout string `protobuf:"bytes,2,opt,name=ping_connection_timeout,json=pingConnectionTimeout,proto3" json:"ping_connection_timeout,omitempty"`
	// Number of documents to process in DescribeTable method to deduce table schema
	CountDocsToDeduceSchema uint32                     `protobuf:"varint,3,opt,name=count_docs_to_deduce_schema,json=countDocsToDeduceSchema,proto3" json:"count_docs_to_deduce_schema,omitempty"`
	ExponentialBackoff      *TExponentialBackoffConfig `protobuf:"bytes,10,opt,name=exponential_backoff,json=exponentialBackoff,proto3" json:"exponential_backoff,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TMongoDbConfig) Reset() {
	*x = TMongoDbConfig{}
	mi := &file_app_config_server_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TMongoDbConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMongoDbConfig) ProtoMessage() {}

func (x *TMongoDbConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMongoDbConfig.ProtoReflect.Descriptor instead.
func (*TMongoDbConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{16}
}

func (x *TMongoDbConfig) GetOpenConnectionTimeout() string {
	if x != nil {
		return x.OpenConnectionTimeout
	}
	return ""
}

func (x *TMongoDbConfig) GetPingConnectionTimeout() string {
	if x != nil {
		return x.PingConnectionTimeout
	}
	return ""
}

func (x *TMongoDbConfig) GetCountDocsToDeduceSchema() uint32 {
	if x != nil {
		return x.CountDocsToDeduceSchema
	}
	return 0
}

func (x *TMongoDbConfig) GetExponentialBackoff() *TExponentialBackoffConfig {
	if x != nil {
		return x.ExponentialBackoff
	}
	return nil
}

// TRedisConfig contains settings specific for Redis data source
type TRedisConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timeout for Redis connection pinging.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	PingConnectionTimeout string `protobuf:"bytes,2,opt,name=ping_connection_timeout,json=pingConnectionTimeout,proto3" json:"ping_connection_timeout,omitempty"`
	// Number of values to process in DescribeTable method to deduce table schema
	CountDocsToDeduceSchema uint32                     `protobuf:"varint,3,opt,name=count_docs_to_deduce_schema,json=countDocsToDeduceSchema,proto3" json:"count_docs_to_deduce_schema,omitempty"`
	ExponentialBackoff      *TExponentialBackoffConfig `protobuf:"bytes,10,opt,name=exponential_backoff,json=exponentialBackoff,proto3" json:"exponential_backoff,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TRedisConfig) Reset() {
	*x = TRedisConfig{}
	mi := &file_app_config_server_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TRedisConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRedisConfig) ProtoMessage() {}

func (x *TRedisConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRedisConfig.ProtoReflect.Descriptor instead.
func (*TRedisConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{17}
}

func (x *TRedisConfig) GetPingConnectionTimeout() string {
	if x != nil {
		return x.PingConnectionTimeout
	}
	return ""
}

func (x *TRedisConfig) GetCountDocsToDeduceSchema() uint32 {
	if x != nil {
		return x.CountDocsToDeduceSchema
	}
	return 0
}

func (x *TRedisConfig) GetExponentialBackoff() *TExponentialBackoffConfig {
	if x != nil {
		return x.ExponentialBackoff
	}
	return nil
}

// TPostgreSQLConfig contains settings specific for PostgreSQL data source
type TPostgreSQLConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timeout for PostgreSQL connection opening.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	OpenConnectionTimeout string                     `protobuf:"bytes,1,opt,name=open_connection_timeout,json=openConnectionTimeout,proto3" json:"open_connection_timeout,omitempty"`
	ExponentialBackoff    *TExponentialBackoffConfig `protobuf:"bytes,10,opt,name=exponential_backoff,json=exponentialBackoff,proto3" json:"exponential_backoff,omitempty"`
	Pushdown              *TPushdownConfig           `protobuf:"bytes,11,opt,name=pushdown,proto3" json:"pushdown,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TPostgreSQLConfig) Reset() {
	*x = TPostgreSQLConfig{}
	mi := &file_app_config_server_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPostgreSQLConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPostgreSQLConfig) ProtoMessage() {}

func (x *TPostgreSQLConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPostgreSQLConfig.ProtoReflect.Descriptor instead.
func (*TPostgreSQLConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{18}
}

func (x *TPostgreSQLConfig) GetOpenConnectionTimeout() string {
	if x != nil {
		return x.OpenConnectionTimeout
	}
	return ""
}

func (x *TPostgreSQLConfig) GetExponentialBackoff() *TExponentialBackoffConfig {
	if x != nil {
		return x.ExponentialBackoff
	}
	return nil
}

func (x *TPostgreSQLConfig) GetPushdown() *TPushdownConfig {
	if x != nil {
		return x.Pushdown
	}
	return nil
}

// TYdbConfig contains settings specific for YDB data source
type TYdbConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timeout for YDB connection opening.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	OpenConnectionTimeout string `protobuf:"bytes,1,opt,name=open_connection_timeout,json=openConnectionTimeout,proto3" json:"open_connection_timeout,omitempty"`
	// Timeout for YDB connection pinging.
	// Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	PingConnectionTimeout string `protobuf:"bytes,2,opt,name=ping_connection_timeout,json=pingConnectionTimeout,proto3" json:"ping_connection_timeout,omitempty"`
	// Flag forcing the usage of underlay networks for dedicated YDB databases
	UseUnderlayNetworkForDedicatedDatabases bool `protobuf:"varint,3,opt,name=use_underlay_network_for_dedicated_databases,json=useUnderlayNetworkForDedicatedDatabases,proto3" json:"use_underlay_network_for_dedicated_databases,omitempty"`
	// Mode parametrizes the way YDB connector interacts with YDB servers.
	// MODE_TABLE_SERVICE_STDLIB_SCAN_QUERIES is the default mode.
	Mode TYdbConfig_Mode `protobuf:"varint,4,opt,name=mode,proto3,enum=NYql.Connector.App.Config.TYdbConfig_Mode" json:"mode,omitempty"`
	// Path to JSON file with static SA credentials.
	// If this file is provided, the YDB connector will use
	// this credentials to access the database.
	ServiceAccountKeyFileCredentials string `protobuf:"bytes,5,opt,name=service_account_key_file_credentials,json=serviceAccountKeyFileCredentials,proto3" json:"service_account_key_file_credentials,omitempty"`
	// One should provide IAM endpoint to authenticate service account
	// if service_account_key_file_credentials is set.
	IamEndpoint        *common.TGenericEndpoint   `protobuf:"bytes,6,opt,name=iam_endpoint,json=iamEndpoint,proto3" json:"iam_endpoint,omitempty"`
	Splitting          *TYdbConfig_TSplitting     `protobuf:"bytes,7,opt,name=splitting,proto3" json:"splitting,omitempty"`
	ExponentialBackoff *TExponentialBackoffConfig `protobuf:"bytes,10,opt,name=exponential_backoff,json=exponentialBackoff,proto3" json:"exponential_backoff,omitempty"`
	Pushdown           *TPushdownConfig           `protobuf:"bytes,11,opt,name=pushdown,proto3" json:"pushdown,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TYdbConfig) Reset() {
	*x = TYdbConfig{}
	mi := &file_app_config_server_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TYdbConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TYdbConfig) ProtoMessage() {}

func (x *TYdbConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TYdbConfig.ProtoReflect.Descriptor instead.
func (*TYdbConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{19}
}

func (x *TYdbConfig) GetOpenConnectionTimeout() string {
	if x != nil {
		return x.OpenConnectionTimeout
	}
	return ""
}

func (x *TYdbConfig) GetPingConnectionTimeout() string {
	if x != nil {
		return x.PingConnectionTimeout
	}
	return ""
}

func (x *TYdbConfig) GetUseUnderlayNetworkForDedicatedDatabases() bool {
	if x != nil {
		return x.UseUnderlayNetworkForDedicatedDatabases
	}
	return false
}

func (x *TYdbConfig) GetMode() TYdbConfig_Mode {
	if x != nil {
		return x.Mode
	}
	return TYdbConfig_MODE_UNSPECIFIED
}

func (x *TYdbConfig) GetServiceAccountKeyFileCredentials() string {
	if x != nil {
		return x.ServiceAccountKeyFileCredentials
	}
	return ""
}

func (x *TYdbConfig) GetIamEndpoint() *common.TGenericEndpoint {
	if x != nil {
		return x.IamEndpoint
	}
	return nil
}

func (x *TYdbConfig) GetSplitting() *TYdbConfig_TSplitting {
	if x != nil {
		return x.Splitting
	}
	return nil
}

func (x *TYdbConfig) GetExponentialBackoff() *TExponentialBackoffConfig {
	if x != nil {
		return x.ExponentialBackoff
	}
	return nil
}

func (x *TYdbConfig) GetPushdown() *TPushdownConfig {
	if x != nil {
		return x.Pushdown
	}
	return nil
}

// TLoggingConfig contains settings specific for Logging external datasource
type TLoggingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Under the hood the Logging connector goes to YDB,
	// so all YDB settings can be applied to this connector as well.
	Ydb *TYdbConfig `protobuf:"bytes,1,opt,name=ydb,proto3" json:"ydb,omitempty"`
	// Types that are valid to be assigned to Resolving:
	//
	//	*TLoggingConfig_Dynamic
	//	*TLoggingConfig_Static
	Resolving     isTLoggingConfig_Resolving `protobuf_oneof:"resolving"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLoggingConfig) Reset() {
	*x = TLoggingConfig{}
	mi := &file_app_config_server_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLoggingConfig) ProtoMessage() {}

func (x *TLoggingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLoggingConfig.ProtoReflect.Descriptor instead.
func (*TLoggingConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{20}
}

func (x *TLoggingConfig) GetYdb() *TYdbConfig {
	if x != nil {
		return x.Ydb
	}
	return nil
}

func (x *TLoggingConfig) GetResolving() isTLoggingConfig_Resolving {
	if x != nil {
		return x.Resolving
	}
	return nil
}

func (x *TLoggingConfig) GetDynamic() *TLoggingConfig_TDynamicResolving {
	if x != nil {
		if x, ok := x.Resolving.(*TLoggingConfig_Dynamic); ok {
			return x.Dynamic
		}
	}
	return nil
}

func (x *TLoggingConfig) GetStatic() *TLoggingConfig_TStaticResolving {
	if x != nil {
		if x, ok := x.Resolving.(*TLoggingConfig_Static); ok {
			return x.Static
		}
	}
	return nil
}

type isTLoggingConfig_Resolving interface {
	isTLoggingConfig_Resolving()
}

type TLoggingConfig_Dynamic struct {
	Dynamic *TLoggingConfig_TDynamicResolving `protobuf:"bytes,2,opt,name=dynamic,proto3,oneof"`
}

type TLoggingConfig_Static struct {
	Static *TLoggingConfig_TStaticResolving `protobuf:"bytes,3,opt,name=static,proto3,oneof"`
}

func (*TLoggingConfig_Dynamic) isTLoggingConfig_Resolving() {}

func (*TLoggingConfig_Static) isTLoggingConfig_Resolving() {}

// TDatasouceConfig is a collection of datasource-specific settings
type TDatasourcesConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ydb           *TYdbConfig            `protobuf:"bytes,1,opt,name=ydb,proto3" json:"ydb,omitempty"`
	Mysql         *TMySQLConfig          `protobuf:"bytes,2,opt,name=mysql,proto3" json:"mysql,omitempty"`
	Clickhouse    *TClickHouseConfig     `protobuf:"bytes,3,opt,name=clickhouse,proto3" json:"clickhouse,omitempty"`
	MsSqlServer   *TMsSQLServerConfig    `protobuf:"bytes,4,opt,name=ms_sql_server,json=msSqlServer,proto3" json:"ms_sql_server,omitempty"`
	Postgresql    *TPostgreSQLConfig     `protobuf:"bytes,5,opt,name=postgresql,proto3" json:"postgresql,omitempty"`
	Greenplum     *TGreenplumConfig      `protobuf:"bytes,6,opt,name=greenplum,proto3" json:"greenplum,omitempty"`
	Oracle        *TOracleConfig         `protobuf:"bytes,7,opt,name=oracle,proto3" json:"oracle,omitempty"`
	Logging       *TLoggingConfig        `protobuf:"bytes,8,opt,name=logging,proto3" json:"logging,omitempty"`
	Mongodb       *TMongoDbConfig        `protobuf:"bytes,9,opt,name=mongodb,proto3" json:"mongodb,omitempty"`
	Redis         *TRedisConfig          `protobuf:"bytes,10,opt,name=redis,proto3" json:"redis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TDatasourcesConfig) Reset() {
	*x = TDatasourcesConfig{}
	mi := &file_app_config_server_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TDatasourcesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDatasourcesConfig) ProtoMessage() {}

func (x *TDatasourcesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDatasourcesConfig.ProtoReflect.Descriptor instead.
func (*TDatasourcesConfig) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{21}
}

func (x *TDatasourcesConfig) GetYdb() *TYdbConfig {
	if x != nil {
		return x.Ydb
	}
	return nil
}

func (x *TDatasourcesConfig) GetMysql() *TMySQLConfig {
	if x != nil {
		return x.Mysql
	}
	return nil
}

func (x *TDatasourcesConfig) GetClickhouse() *TClickHouseConfig {
	if x != nil {
		return x.Clickhouse
	}
	return nil
}

func (x *TDatasourcesConfig) GetMsSqlServer() *TMsSQLServerConfig {
	if x != nil {
		return x.MsSqlServer
	}
	return nil
}

func (x *TDatasourcesConfig) GetPostgresql() *TPostgreSQLConfig {
	if x != nil {
		return x.Postgresql
	}
	return nil
}

func (x *TDatasourcesConfig) GetGreenplum() *TGreenplumConfig {
	if x != nil {
		return x.Greenplum
	}
	return nil
}

func (x *TDatasourcesConfig) GetOracle() *TOracleConfig {
	if x != nil {
		return x.Oracle
	}
	return nil
}

func (x *TDatasourcesConfig) GetLogging() *TLoggingConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *TDatasourcesConfig) GetMongodb() *TMongoDbConfig {
	if x != nil {
		return x.Mongodb
	}
	return nil
}

func (x *TDatasourcesConfig) GetRedis() *TRedisConfig {
	if x != nil {
		return x.Redis
	}
	return nil
}

// TSplitting contains various setting for the process of table splitting
type TYdbConfig_TSplitting struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enables splitting for OLAP tables
	EnabledOnColumnShards bool `protobuf:"varint,1,opt,name=enabled_on_column_shards,json=enabledOnColumnShards,proto3" json:"enabled_on_column_shards,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TYdbConfig_TSplitting) Reset() {
	*x = TYdbConfig_TSplitting{}
	mi := &file_app_config_server_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TYdbConfig_TSplitting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TYdbConfig_TSplitting) ProtoMessage() {}

func (x *TYdbConfig_TSplitting) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TYdbConfig_TSplitting.ProtoReflect.Descriptor instead.
func (*TYdbConfig_TSplitting) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{19, 0}
}

func (x *TYdbConfig_TSplitting) GetEnabledOnColumnShards() bool {
	if x != nil {
		return x.EnabledOnColumnShards
	}
	return false
}

// Logging connector can resolve the underlying YDB endpoints
// via calls to Cloud Logging API
type TLoggingConfig_TDynamicResolving struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	LoggingEndpoint *common.TGenericEndpoint `protobuf:"bytes,1,opt,name=logging_endpoint,json=loggingEndpoint,proto3" json:"logging_endpoint,omitempty"`
	// List of the databases that will be ignored in the Cloud Logging API response.
	// No data will be returned from these databases.
	DatabaseBlacklist []string `protobuf:"bytes,2,rep,name=database_blacklist,json=databaseBlacklist,proto3" json:"database_blacklist,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TLoggingConfig_TDynamicResolving) Reset() {
	*x = TLoggingConfig_TDynamicResolving{}
	mi := &file_app_config_server_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLoggingConfig_TDynamicResolving) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLoggingConfig_TDynamicResolving) ProtoMessage() {}

func (x *TLoggingConfig_TDynamicResolving) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLoggingConfig_TDynamicResolving.ProtoReflect.Descriptor instead.
func (*TLoggingConfig_TDynamicResolving) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{20, 0}
}

func (x *TLoggingConfig_TDynamicResolving) GetLoggingEndpoint() *common.TGenericEndpoint {
	if x != nil {
		return x.LoggingEndpoint
	}
	return nil
}

func (x *TLoggingConfig_TDynamicResolving) GetDatabaseBlacklist() []string {
	if x != nil {
		return x.DatabaseBlacklist
	}
	return nil
}

// But for the tests it is useful to set all the YDB endpoints manually.
type TLoggingConfig_TStaticResolving struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The connector will iterate through this list while making the connections.
	Databases []*TLoggingConfig_TStaticResolving_TDatabase `protobuf:"bytes,1,rep,name=databases,proto3" json:"databases,omitempty"`
	// folder_id -> log_group_name -> log_group_id mapping is
	// used for YDB table names construction.
	Folders map[string]*TLoggingConfig_TStaticResolving_TFolder `protobuf:"bytes,2,rep,name=folders,proto3" json:"folders,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Template that will be used to construct YDB table names
	// in the format Go `text/template` format, for example:
	// "logs/origin/{{.CloudName}}/{{.FolderID}}/{{.LogGroupID}}"
	TableNamingPattern string `protobuf:"bytes,3,opt,name=table_naming_pattern,json=tableNamingPattern,proto3" json:"table_naming_pattern,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TLoggingConfig_TStaticResolving) Reset() {
	*x = TLoggingConfig_TStaticResolving{}
	mi := &file_app_config_server_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLoggingConfig_TStaticResolving) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLoggingConfig_TStaticResolving) ProtoMessage() {}

func (x *TLoggingConfig_TStaticResolving) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLoggingConfig_TStaticResolving.ProtoReflect.Descriptor instead.
func (*TLoggingConfig_TStaticResolving) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{20, 1}
}

func (x *TLoggingConfig_TStaticResolving) GetDatabases() []*TLoggingConfig_TStaticResolving_TDatabase {
	if x != nil {
		return x.Databases
	}
	return nil
}

func (x *TLoggingConfig_TStaticResolving) GetFolders() map[string]*TLoggingConfig_TStaticResolving_TFolder {
	if x != nil {
		return x.Folders
	}
	return nil
}

func (x *TLoggingConfig_TStaticResolving) GetTableNamingPattern() string {
	if x != nil {
		return x.TableNamingPattern
	}
	return ""
}

type TLoggingConfig_TStaticResolving_TDatabase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// network address
	Endpoint *common.TGenericEndpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// database name
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLoggingConfig_TStaticResolving_TDatabase) Reset() {
	*x = TLoggingConfig_TStaticResolving_TDatabase{}
	mi := &file_app_config_server_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLoggingConfig_TStaticResolving_TDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLoggingConfig_TStaticResolving_TDatabase) ProtoMessage() {}

func (x *TLoggingConfig_TStaticResolving_TDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLoggingConfig_TStaticResolving_TDatabase.ProtoReflect.Descriptor instead.
func (*TLoggingConfig_TStaticResolving_TDatabase) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{20, 1, 0}
}

func (x *TLoggingConfig_TStaticResolving_TDatabase) GetEndpoint() *common.TGenericEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *TLoggingConfig_TStaticResolving_TDatabase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TLoggingConfig_TStaticResolving_TFolder struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// log_group_name -> log_group_id mapping is
	// used for YDB table names construction.
	LogGroups map[string]string `protobuf:"bytes,1,rep,name=log_groups,json=logGroups,proto3" json:"log_groups,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// folders are globally unique across the cloud,
	// so we can unambiguously identify the cloud for a certain folder_id.
	CloudName     string `protobuf:"bytes,2,opt,name=cloud_name,json=cloudName,proto3" json:"cloud_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLoggingConfig_TStaticResolving_TFolder) Reset() {
	*x = TLoggingConfig_TStaticResolving_TFolder{}
	mi := &file_app_config_server_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLoggingConfig_TStaticResolving_TFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLoggingConfig_TStaticResolving_TFolder) ProtoMessage() {}

func (x *TLoggingConfig_TStaticResolving_TFolder) ProtoReflect() protoreflect.Message {
	mi := &file_app_config_server_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLoggingConfig_TStaticResolving_TFolder.ProtoReflect.Descriptor instead.
func (*TLoggingConfig_TStaticResolving_TFolder) Descriptor() ([]byte, []int) {
	return file_app_config_server_proto_rawDescGZIP(), []int{20, 1, 1}
}

func (x *TLoggingConfig_TStaticResolving_TFolder) GetLogGroups() map[string]string {
	if x != nil {
		return x.LogGroups
	}
	return nil
}

func (x *TLoggingConfig_TStaticResolving_TFolder) GetCloudName() string {
	if x != nil {
		return x.CloudName
	}
	return ""
}

var File_app_config_server_proto protoreflect.FileDescriptor

var file_app_config_server_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x3b, 0x79, 0x71, 0x6c, 0x2f, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x81, 0x06, 0x0a, 0x0d, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x54, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x03, 0x74,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x4c, 0x53, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x5c,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0c, 0x70, 0x70,
	0x72, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x50, 0x70,
	0x72, 0x6f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0b, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4e, 0x59, 0x71,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4e, 0x59, 0x71, 0x6c,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x54, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x54, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03,
	0x74, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3e, 0x0a, 0x10, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x26, 0x0a, 0x10, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x8b,
	0x01, 0x0a, 0x0d, 0x54, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x41, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x45, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x71,
	0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x71, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x87, 0x01, 0x0a,
	0x12, 0x54, 0x50, 0x70, 0x72, 0x6f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x54, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x54, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x32, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x54, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x74,
	0x6c, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x54, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x6f, 0x77,
	0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x47, 0x0a, 0x11, 0x54, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x75,
	0x73, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x55,
	0x6e, 0x73, 0x61, 0x66, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x73, 0x22,
	0xe6, 0x01, 0x0a, 0x19, 0x54, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x14, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x45, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x0f, 0x54, 0x50, 0x75, 0x73,
	0x68, 0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x19, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50,
	0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xb2, 0x02, 0x0a, 0x11, 0x54, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a,
	0x17, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x65, 0x0a,
	0x13, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x6f, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4e, 0x59, 0x71,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x6f, 0x66, 0x66, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x50, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xf9, 0x01, 0x0a,
	0x10, 0x54, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x65, 0x0a, 0x13, 0x65, 0x78, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x65, 0x78,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66,
	0x12, 0x46, 0x0a, 0x08, 0x70, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x50, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08,
	0x70, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xb3, 0x02, 0x0a, 0x12, 0x54, 0x4d, 0x73,
	0x53, 0x51, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x36, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x65, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4e,
	0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x75, 0x73, 0x68, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x50, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xa7,
	0x02, 0x0a, 0x0c, 0x54, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x65, 0x0a, 0x13, 0x65, 0x78, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x65, 0x78,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66,
	0x12, 0x46, 0x0a, 0x08, 0x70, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x50, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08,
	0x70, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xae, 0x02, 0x0a, 0x0d, 0x54, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x70, 0x65,
	0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x65, 0x0a, 0x13, 0x65, 0x78,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x65,
	0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x50, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x08, 0x70, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xa5, 0x02, 0x0a, 0x0e, 0x54, 0x4d,
	0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x17,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f,
	0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x1b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x73, 0x54, 0x6f, 0x44, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x65, 0x0a, 0x13, 0x65, 0x78,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x65,
	0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x22, 0xeb, 0x01, 0x0a, 0x0c, 0x54, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x65, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61,
	0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x65, 0x78, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x22,
	0xfa, 0x01, 0x0a, 0x11, 0x54, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x65, 0x0a,
	0x13, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x6f, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4e, 0x59, 0x71,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x6f, 0x66, 0x66, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x50, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xd5, 0x06, 0x0a,
	0x0a, 0x54, 0x59, 0x64, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x70,
	0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5d, 0x0a, 0x2c, 0x75,
	0x73, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x27, 0x75, 0x73, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x59, 0x64, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x69, 0x61,
	0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x54, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x61, 0x6d, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x59, 0x64, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x6f,
	0x66, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x46, 0x0a, 0x08,
	0x70, 0x75, 0x73, 0x68, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x50, 0x75, 0x73, 0x68,
	0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68,
	0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x45, 0x0a, 0x0a, 0x54, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x22, 0x67, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x44, 0x4c, 0x49, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x49, 0x45, 0x53, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x22, 0xcb, 0x08, 0x0a, 0x0e, 0x54, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x03, 0x79, 0x64, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x59, 0x64, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x79, 0x64, 0x62,
	0x12, 0x57, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x4e, 0x59, 0x71, 0x6c,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x1a,
	0x85, 0x01, 0x0a, 0x11, 0x54, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x54, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xbb, 0x05, 0x0a, 0x10, 0x54, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x62, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x61, 0x0a, 0x07, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x1a, 0x53, 0x0a, 0x09, 0x54, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x54, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xd8, 0x01, 0x0a, 0x07, 0x54,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x4e, 0x59, 0x71,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c,
	0x6f, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7e, 0x0a, 0x0c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x58, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x69,
	0x6e, 0x67, 0x2e, 0x54, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x69,
	0x6e, 0x67, 0x22, 0xd1, 0x05, 0x0a, 0x12, 0x54, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x03, 0x79, 0x64, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x59, 0x64, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x79,
	0x64, 0x62, 0x12, 0x3d, 0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4d,
	0x79, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x0d, 0x6d, 0x73, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x4d, 0x73, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6d, 0x73, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c,
	0x12, 0x49, 0x0a, 0x09, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x09, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x12, 0x40, 0x0a, 0x06, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x59,
	0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x43, 0x0a,
	0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x12, 0x3d, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4e, 0x59, 0x71, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2a, 0x4b, 0x0a, 0x09, 0x45, 0x4c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x05, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x66,
	0x71, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_app_config_server_proto_rawDescOnce sync.Once
	file_app_config_server_proto_rawDescData []byte
)

func file_app_config_server_proto_rawDescGZIP() []byte {
	file_app_config_server_proto_rawDescOnce.Do(func() {
		file_app_config_server_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_app_config_server_proto_rawDesc), len(file_app_config_server_proto_rawDesc)))
	})
	return file_app_config_server_proto_rawDescData
}

var file_app_config_server_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_app_config_server_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_app_config_server_proto_goTypes = []any{
	(ELogLevel)(0),                                    // 0: NYql.Connector.App.Config.ELogLevel
	(TYdbConfig_Mode)(0),                              // 1: NYql.Connector.App.Config.TYdbConfig.Mode
	(*TServerConfig)(nil),                             // 2: NYql.Connector.App.Config.TServerConfig
	(*TConnectorServerConfig)(nil),                    // 3: NYql.Connector.App.Config.TConnectorServerConfig
	(*TServerTLSConfig)(nil),                          // 4: NYql.Connector.App.Config.TServerTLSConfig
	(*TServerReadLimit)(nil),                          // 5: NYql.Connector.App.Config.TServerReadLimit
	(*TLoggerConfig)(nil),                             // 6: NYql.Connector.App.Config.TLoggerConfig
	(*TPprofServerConfig)(nil),                        // 7: NYql.Connector.App.Config.TPprofServerConfig
	(*TMetricsServerConfig)(nil),                      // 8: NYql.Connector.App.Config.TMetricsServerConfig
	(*TPagingConfig)(nil),                             // 9: NYql.Connector.App.Config.TPagingConfig
	(*TConversionConfig)(nil),                         // 10: NYql.Connector.App.Config.TConversionConfig
	(*TExponentialBackoffConfig)(nil),                 // 11: NYql.Connector.App.Config.TExponentialBackoffConfig
	(*TPushdownConfig)(nil),                           // 12: NYql.Connector.App.Config.TPushdownConfig
	(*TClickHouseConfig)(nil),                         // 13: NYql.Connector.App.Config.TClickHouseConfig
	(*TGreenplumConfig)(nil),                          // 14: NYql.Connector.App.Config.TGreenplumConfig
	(*TMsSQLServerConfig)(nil),                        // 15: NYql.Connector.App.Config.TMsSQLServerConfig
	(*TMySQLConfig)(nil),                              // 16: NYql.Connector.App.Config.TMySQLConfig
	(*TOracleConfig)(nil),                             // 17: NYql.Connector.App.Config.TOracleConfig
	(*TMongoDbConfig)(nil),                            // 18: NYql.Connector.App.Config.TMongoDbConfig
	(*TRedisConfig)(nil),                              // 19: NYql.Connector.App.Config.TRedisConfig
	(*TPostgreSQLConfig)(nil),                         // 20: NYql.Connector.App.Config.TPostgreSQLConfig
	(*TYdbConfig)(nil),                                // 21: NYql.Connector.App.Config.TYdbConfig
	(*TLoggingConfig)(nil),                            // 22: NYql.Connector.App.Config.TLoggingConfig
	(*TDatasourcesConfig)(nil),                        // 23: NYql.Connector.App.Config.TDatasourcesConfig
	(*TYdbConfig_TSplitting)(nil),                     // 24: NYql.Connector.App.Config.TYdbConfig.TSplitting
	(*TLoggingConfig_TDynamicResolving)(nil),          // 25: NYql.Connector.App.Config.TLoggingConfig.TDynamicResolving
	(*TLoggingConfig_TStaticResolving)(nil),           // 26: NYql.Connector.App.Config.TLoggingConfig.TStaticResolving
	(*TLoggingConfig_TStaticResolving_TDatabase)(nil), // 27: NYql.Connector.App.Config.TLoggingConfig.TStaticResolving.TDatabase
	(*TLoggingConfig_TStaticResolving_TFolder)(nil),   // 28: NYql.Connector.App.Config.TLoggingConfig.TStaticResolving.TFolder
	nil,                             // 29: NYql.Connector.App.Config.TLoggingConfig.TStaticResolving.FoldersEntry
	nil,                             // 30: NYql.Connector.App.Config.TLoggingConfig.TStaticResolving.TFolder.LogGroupsEntry
	(*common.TGenericEndpoint)(nil), // 31: NYql.TGenericEndpoint
}
var file_app_config_server_proto_depIdxs = []int32{
	31, // 0: NYql.Connector.App.Config.TServerConfig.endpoint:type_name -> NYql.TGenericEndpoint
	4,  // 1: NYql.Connector.App.Config.TServerConfig.tls:type_name -> NYql.Connector.App.Config.TServerTLSConfig
	3,  // 2: NYql.Connector.App.Config.TServerConfig.connector_server:type_name -> NYql.Connector.App.Config.TConnectorServerConfig
	5,  // 3: NYql.Connector.App.Config.TServerConfig.read_limit:type_name -> NYql.Connector.App.Config.TServerReadLimit
	6,  // 4: NYql.Connector.App.Config.TServerConfig.logger:type_name -> NYql.Connector.App.Config.TLoggerConfig
	7,  // 5: NYql.Connector.App.Config.TServerConfig.pprof_server:type_name -> NYql.Connector.App.Config.TPprofServerConfig
	8,  // 6: NYql.Connector.App.Config.TServerConfig.metrics_server:type_name -> NYql.Connector.App.Config.TMetricsServerConfig
	9,  // 7: NYql.Connector.App.Config.TServerConfig.paging:type_name -> NYql.Connector.App.Config.TPagingConfig
	10, // 8: NYql.Connector.App.Config.TServerConfig.conversion:type_name -> NYql.Connector.App.Config.TConversionConfig
	23, // 9: NYql.Connector.App.Config.TServerConfig.datasources:type_name -> NYql.Connector.App.Config.TDatasourcesConfig
	31, // 10: NYql.Connector.App.Config.TConnectorServerConfig.endpoint:type_name -> NYql.TGenericEndpoint
	4,  // 11: NYql.Connector.App.Config.TConnectorServerConfig.tls:type_name -> NYql.Connector.App.Config.TServerTLSConfig
	0,  // 12: NYql.Connector.App.Config.TLoggerConfig.log_level:type_name -> NYql.Connector.App.Config.ELogLevel
	31, // 13: NYql.Connector.App.Config.TPprofServerConfig.endpoint:type_name -> NYql.TGenericEndpoint
	4,  // 14: NYql.Connector.App.Config.TPprofServerConfig.tls:type_name -> NYql.Connector.App.Config.TServerTLSConfig
	31, // 15: NYql.Connector.App.Config.TMetricsServerConfig.endpoint:type_name -> NYql.TGenericEndpoint
	4,  // 16: NYql.Connector.App.Config.TMetricsServerConfig.tls:type_name -> NYql.Connector.App.Config.TServerTLSConfig
	11, // 17: NYql.Connector.App.Config.TClickHouseConfig.exponential_backoff:type_name -> NYql.Connector.App.Config.TExponentialBackoffConfig
	12, // 18: NYql.Connector.App.Config.TClickHouseConfig.pushdown:type_name -> NYql.Connector.App.Config.TPushdownConfig
	11, // 19: NYql.Connector.App.Config.TGreenplumConfig.exponential_backoff:type_name -> NYql.Connector.App.Config.TExponentialBackoffConfig
	12, // 20: NYql.Connector.App.Config.TGreenplumConfig.pushdown:type_name -> NYql.Connector.App.Config.TPushdownConfig
	11, // 21: NYql.Connector.App.Config.TMsSQLServerConfig.exponential_backoff:type_name -> NYql.Connector.App.Config.TExponentialBackoffConfig
	12, // 22: NYql.Connector.App.Config.TMsSQLServerConfig.pushdown:type_name -> NYql.Connector.App.Config.TPushdownConfig
	11, // 23: NYql.Connector.App.Config.TMySQLConfig.exponential_backoff:type_name -> NYql.Connector.App.Config.TExponentialBackoffConfig
	12, // 24: NYql.Connector.App.Config.TMySQLConfig.pushdown:type_name -> NYql.Connector.App.Config.TPushdownConfig
	11, // 25: NYql.Connector.App.Config.TOracleConfig.exponential_backoff:type_name -> NYql.Connector.App.Config.TExponentialBackoffConfig
	12, // 26: NYql.Connector.App.Config.TOracleConfig.pushdown:type_name -> NYql.Connector.App.Config.TPushdownConfig
	11, // 27: NYql.Connector.App.Config.TMongoDbConfig.exponential_backoff:type_name -> NYql.Connector.App.Config.TExponentialBackoffConfig
	11, // 28: NYql.Connector.App.Config.TRedisConfig.exponential_backoff:type_name -> NYql.Connector.App.Config.TExponentialBackoffConfig
	11, // 29: NYql.Connector.App.Config.TPostgreSQLConfig.exponential_backoff:type_name -> NYql.Connector.App.Config.TExponentialBackoffConfig
	12, // 30: NYql.Connector.App.Config.TPostgreSQLConfig.pushdown:type_name -> NYql.Connector.App.Config.TPushdownConfig
	1,  // 31: NYql.Connector.App.Config.TYdbConfig.mode:type_name -> NYql.Connector.App.Config.TYdbConfig.Mode
	31, // 32: NYql.Connector.App.Config.TYdbConfig.iam_endpoint:type_name -> NYql.TGenericEndpoint
	24, // 33: NYql.Connector.App.Config.TYdbConfig.splitting:type_name -> NYql.Connector.App.Config.TYdbConfig.TSplitting
	11, // 34: NYql.Connector.App.Config.TYdbConfig.exponential_backoff:type_name -> NYql.Connector.App.Config.TExponentialBackoffConfig
	12, // 35: NYql.Connector.App.Config.TYdbConfig.pushdown:type_name -> NYql.Connector.App.Config.TPushdownConfig
	21, // 36: NYql.Connector.App.Config.TLoggingConfig.ydb:type_name -> NYql.Connector.App.Config.TYdbConfig
	25, // 37: NYql.Connector.App.Config.TLoggingConfig.dynamic:type_name -> NYql.Connector.App.Config.TLoggingConfig.TDynamicResolving
	26, // 38: NYql.Connector.App.Config.TLoggingConfig.static:type_name -> NYql.Connector.App.Config.TLoggingConfig.TStaticResolving
	21, // 39: NYql.Connector.App.Config.TDatasourcesConfig.ydb:type_name -> NYql.Connector.App.Config.TYdbConfig
	16, // 40: NYql.Connector.App.Config.TDatasourcesConfig.mysql:type_name -> NYql.Connector.App.Config.TMySQLConfig
	13, // 41: NYql.Connector.App.Config.TDatasourcesConfig.clickhouse:type_name -> NYql.Connector.App.Config.TClickHouseConfig
	15, // 42: NYql.Connector.App.Config.TDatasourcesConfig.ms_sql_server:type_name -> NYql.Connector.App.Config.TMsSQLServerConfig
	20, // 43: NYql.Connector.App.Config.TDatasourcesConfig.postgresql:type_name -> NYql.Connector.App.Config.TPostgreSQLConfig
	14, // 44: NYql.Connector.App.Config.TDatasourcesConfig.greenplum:type_name -> NYql.Connector.App.Config.TGreenplumConfig
	17, // 45: NYql.Connector.App.Config.TDatasourcesConfig.oracle:type_name -> NYql.Connector.App.Config.TOracleConfig
	22, // 46: NYql.Connector.App.Config.TDatasourcesConfig.logging:type_name -> NYql.Connector.App.Config.TLoggingConfig
	18, // 47: NYql.Connector.App.Config.TDatasourcesConfig.mongodb:type_name -> NYql.Connector.App.Config.TMongoDbConfig
	19, // 48: NYql.Connector.App.Config.TDatasourcesConfig.redis:type_name -> NYql.Connector.App.Config.TRedisConfig
	31, // 49: NYql.Connector.App.Config.TLoggingConfig.TDynamicResolving.logging_endpoint:type_name -> NYql.TGenericEndpoint
	27, // 50: NYql.Connector.App.Config.TLoggingConfig.TStaticResolving.databases:type_name -> NYql.Connector.App.Config.TLoggingConfig.TStaticResolving.TDatabase
	29, // 51: NYql.Connector.App.Config.TLoggingConfig.TStaticResolving.folders:type_name -> NYql.Connector.App.Config.TLoggingConfig.TStaticResolving.FoldersEntry
	31, // 52: NYql.Connector.App.Config.TLoggingConfig.TStaticResolving.TDatabase.endpoint:type_name -> NYql.TGenericEndpoint
	30, // 53: NYql.Connector.App.Config.TLoggingConfig.TStaticResolving.TFolder.log_groups:type_name -> NYql.Connector.App.Config.TLoggingConfig.TStaticResolving.TFolder.LogGroupsEntry
	28, // 54: NYql.Connector.App.Config.TLoggingConfig.TStaticResolving.FoldersEntry.value:type_name -> NYql.Connector.App.Config.TLoggingConfig.TStaticResolving.TFolder
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_app_config_server_proto_init() }
func file_app_config_server_proto_init() {
	if File_app_config_server_proto != nil {
		return
	}
	file_app_config_server_proto_msgTypes[20].OneofWrappers = []any{
		(*TLoggingConfig_Dynamic)(nil),
		(*TLoggingConfig_Static)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_app_config_server_proto_rawDesc), len(file_app_config_server_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_app_config_server_proto_goTypes,
		DependencyIndexes: file_app_config_server_proto_depIdxs,
		EnumInfos:         file_app_config_server_proto_enumTypes,
		MessageInfos:      file_app_config_server_proto_msgTypes,
	}.Build()
	File_app_config_server_proto = out.File
	file_app_config_server_proto_goTypes = nil
	file_app_config_server_proto_depIdxs = nil
}
