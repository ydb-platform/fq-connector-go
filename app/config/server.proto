syntax = "proto3";
package NYql.Connector.App.Config;

import "yql/essentials/providers/common/proto/gateways_config.proto";

option go_package = "github.com/ydb-platform/fq-connector-go/app/config";

// Connector server configuration
message TServerConfig {
    NYql.TGenericEndpoint endpoint = 1 [deprecated=true];
    TServerTLSConfig tls = 2 [deprecated=true];

    // TConnectorServerConfig contains configuration of the main GRPC server
    TConnectorServerConfig connector_server = 5; 
    // This is a rough restriction for YQ memory consumption until
    // https://st.yandex-team.ru/YQ-2057 is implemented.
    // Leave it empty if you want to avoid any memory limits.
    TServerReadLimit read_limit = 3;
    // Logger config
    TLoggerConfig logger = 4;
    // Go runtime profiler.
    // Disabled if this part of config is empty.
    TPprofServerConfig pprof_server = 6;
    // Metrics server config
    TMetricsServerConfig metrics_server = 7;
    // Paging config
    TPagingConfig paging = 8;
    // Data types conversion config
    TConversionConfig conversion = 9;
    // Datasource-specific config
    TDatasourcesConfig datasources = 10;
}

// TConnectorServerConfig - configuration of the main GRPC server
message TConnectorServerConfig {
    // Network address server will be listening on
    NYql.TGenericEndpoint endpoint = 1;
    // TLS settings.
    // Leave it empty for insecure connections.
    TServerTLSConfig tls = 2;
    // Defines maximum GRPC request size
    uint64 max_recv_message_size = 3;
}

message TServerTLSConfig {
    // TLS private key path
    string key = 2;
    // TLS public cert path
    string cert = 3;

    reserved 1;
}

// ServerReadLimit limitates the amount of data extracted from the data source on every read request. 
message TServerReadLimit {
    // The number of rows extracted from the data source
    uint64 rows = 1;
}

// TLogger represents logger configuration
message TLoggerConfig {
    // Level of logging
    ELogLevel log_level = 1;
    // Is logging of queries enabled
    bool enable_sql_query_logging = 2;
}

// ELogLevel enumerates standard levels of logging
enum ELogLevel {
    TRACE = 0;
	DEBUG = 1;
	INFO = 2;
	WARN = 3;
	ERROR = 4;
	FATAL = 5;
}

// TPprofServerConfig configures HTTP server delivering Go runtime profiler data 
message TPprofServerConfig {
    // Network address server will be listening on
    NYql.TGenericEndpoint endpoint = 1;
    // TLS settings.
    // Leave it empty for insecure connections.
    TServerTLSConfig tls = 2;
}

// TMetricsConfig - configuration of the metrics service
message TMetricsServerConfig {
    // Network address server will be listening on
    NYql.TGenericEndpoint endpoint = 1;
    // TLS settings.
    // Leave it empty for insecure connections.
    TServerTLSConfig tls = 2;
}

// TPagingConfig configures the way of splitting of the data stream into the fragments (or pages)
// in order to return them as separate GRPC messages to the client.
message TPagingConfig {
    // Configures the limit of a page size in rows.
    // It may override other limits. Ignored if set to zero.
    uint64 rows_per_page = 1;

    // Configures the limit of a page size in bytes.
    // It may override other limits. Ignored if set to zero.
    uint64 bytes_per_page = 2;

    // Connector service can read ahead some data from the data source before returning it to the client.
    // This setting configures the number of pages that may reside in the service's address space 
    // waiting for the client readiness for the data consumption.
    // Tune this carefully cause this may cause service OOMs. 
    uint32 prefetch_queue_capacity = 3;
}

// TConversionConfig configures some aspects of the data conversion process
// between the data source native type system, Go type system and Arrow type system
message TConversionConfig {
    // Enables microoptimized code that can potentially crash the service
    bool use_unsafe_converters = 1;
}

// TExponentialBackoffConfig provides configuration for the exponential backoff 
// which is used for retries of the operations ended up with transient errors.
message TExponentialBackoffConfig {
    // Initial interval between retries
    // Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
    string initial_interval = 1;
    // Maximum total time for retries
    // Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
    string max_interval = 2;
    // Randomization factor to add jitter to intervals
    double randomization_factor = 3;
    // Multiplier for increasing the interval after each retry
    double multiplier = 4;
    // Maximum interval between retries
    // Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
	string max_elapsed_time = 5;
}


// TClickHouseConfig contains settings specific for ClickHouse data source
message TClickHouseConfig {
    // Timeout for ClickHouse connection opening.
    // Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
    string open_connection_timeout = 1; 
    // Timeout for ClickHouse connection pinging.
    // Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
    string ping_connection_timeout = 2;

    TExponentialBackoffConfig exponential_backoff = 10;
}

// TGreenplumConfig contains settings specific for Greenplum data source
message TGreenplumConfig {
    // Timeout for Greenplum connection opening.
    // Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
    string open_connection_timeout = 1; 

    TExponentialBackoffConfig exponential_backoff = 10;
}

// TMsSQLServerConfig contains settings specific for MsSQLServer data source
message TMsSQLServerConfig {
    // Timeout for ClickHouse connection opening.
    // Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
    string open_connection_timeout = 2; 
    // Timeout for MsSQLServer connection pinging.
    // Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
    string ping_connection_timeout = 1;

    TExponentialBackoffConfig exponential_backoff = 10;
}


message TMySQLConfig {
    uint64 result_chan_capacity = 1;

    // Timeout for MySQL connection opening.
    // Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
    string open_connection_timeout = 2; 

    TExponentialBackoffConfig exponential_backoff = 10;
}

// TOracleConfig contains settings specific for Oracle data source
message TOracleConfig {
    // Timeout for Oracle connection opening.
    // Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
    string open_connection_timeout = 1; 
    // Timeout for Oracle connection pinging.
    // Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
    string ping_connection_timeout = 2;

    TExponentialBackoffConfig exponential_backoff = 10;
}

// TPostgreSQLConfig contains settings specific for PostgreSQL data source
message TPostgreSQLConfig {
    // Timeout for PostgreSQL connection opening.
    // Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
    string open_connection_timeout = 1; 

    TExponentialBackoffConfig exponential_backoff = 10;
}

// TYdbConfig contains settings specific for YDB data source
message TYdbConfig {
    // Timeout for YDB connection opening.
    // Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
    string open_connection_timeout = 1; 
    // Timeout for YDB connection pinging.
    // Valid values should satisfy `time.ParseDuration` (e. g. '5s', '100ms', '3h').
    string ping_connection_timeout = 2;
    // Flag forcing the usage of underlay networks for dedicated YDB databases
    bool use_underlay_network_for_dedicated_databases = 3;

    enum Mode {
        MODE_UNSPECIFIED = 0;
        // In MODE_TABLE_SERVICE_STDLIB_SCAN_QUERIES the YDB connector uses YDB's Table Service
        // via Go's standard library database/sql interface.
        // All the requests are marked as scan queries.
        MODE_TABLE_SERVICE_STDLIB_SCAN_QUERIES = 1;
        // In MODE_QUERY_SERVICE_NATIVE the YDB connector uses YDB's Query Service
        // via native YDB interface.
        MODE_QUERY_SERVICE_NATIVE = 2;
    } 

    // Mode parametrizes the way YDB connector interacts with YDB servers.
    // MODE_TABLE_SERVICE_STDLIB_SCAN_QUERIES is the default mode.
    Mode mode = 4;

    // Path to JSON file with static SA credentials.
    // If this file is provided, the YDB connector will use 
    // this credentials to access the database.
    string service_account_key_file_credentials = 5;

    // One should provide IAM endpoint to authenticate service account
    // if service_account_key_file_credentials is set.
    NYql.TGenericEndpoint iam_endpoint = 6;

    TExponentialBackoffConfig exponential_backoff = 10;
}

// TLoggingConfig containes settings specific for Logging external datasource
message TLoggingConfig {
    // Under the hood the Logging connector goes to YDB, 
    // so all YDB settings can be applied to this connector as well.
    TYdbConfig ydb = 1;

    // Logging connector can resolve the underlying YDB endpoints 
    // via calls to Cloud Logging API
    message TDynamicResolving {
        NYql.TGenericEndpoint logging_endpoint = 1;
    }

    // But for the tests it is useful to set all the YDB endpoints manually.
    message TStaticResolving {
        message TDatabase {
            // network address
            NYql.TGenericEndpoint endpoint = 1;
            // database name
            string name = 2; 
        }

        // The connector will iterate through this list while making the connections.
        repeated TDatabase databases = 1;

        message TFolder {
            // log_group_name -> log_group_id mapping is
            // used for YDB table names construction.
            map<string, string> log_groups = 1;
        }

        // folder_id -> log_group_name -> log_group_id mapping is
        // used for YDB table names construction.
        map<string, TFolder> folders = 2;
    }

    oneof resolving {
        TDynamicResolving dynamic = 2;
        TStaticResolving static = 3;
    };
}

// TDatasouceConfig is a collection of datasource-specific settings
message TDatasourcesConfig {
    TYdbConfig ydb = 1;
    TMySQLConfig mysql = 2;
    TClickHouseConfig clickhouse = 3;
    TMsSQLServerConfig ms_sql_server = 4;
    TPostgreSQLConfig postgresql = 5;
    TGreenplumConfig greenplum = 6;
    TOracleConfig oracle = 7;
    TLoggingConfig logging = 8;
}
